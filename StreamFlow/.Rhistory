for (i in 2:n_mu){
data[,1+i] <- ifelse(data$t>point_mu[i-1]&data$t<=point_mu[i],1,0)
}
names(data)[(2+1):(n_mu+1)] <- paste0("D_mu",1:(n_mu-1))
data[,2+n_mu] <- (data$t-point_mu[2])*data[,3]
for (i in 3:n_mu){
data[,i+n_mu] <-(data$t-point_mu[i-1])*data[,i+1]
}
names(data)[(2+n_mu):(n_mu+n_mu)] <- paste0("T_mu",1:(n_mu-1))
if(point_mu[2] == 0){
data <- data[,-5]
}
n_1 <- ncol(data)
point_sig <- c(-1,point_sig,+Inf)
n_sig <- length(point_sig)
for (i in 2:n_sig){
data[,n_1-1+i] <- ifelse(data$t>point_sig[i-1]&data$t<=point_sig[i],1,0)
}
names(data)[(n_1+1):(n_1+n_sig-1)] <- paste0("D_sig",1:(n_sig-1))
data[,n_1+n_sig] <- (data$t-point_sig[2])*data[,n_1+1]
for (i in 3:n_sig){
data[,n_1+n_sig+i-2] <-(data$t-point_sig[i-1])*data[,n_1+i-1]
}
names(data)[(n_1+n_sig):(n_1+2*n_sig-2)] <- paste0("T_sig",1:(n_sig-1))
if(point_sig[2] == 0){
data <- data[,-(n_1+3)]
}
n_2 <- ncol(data)
point_sh <- c(-1,point_sh,+Inf)
n_sh <- length(point_sh)
for (i in 2:n_sh){
data[,n_2-1+i] <- ifelse(data$t>point_sh[i-1]&data$t<=point_sh[i],1,0)
}
names(data)[(n_2+1):(n_2+n_sh-1)] <- paste0("D_sh",1:(n_sh-1))
data[,n_2+n_sh] <- (data$t-point_sh[2])*data[,n_1+1]
for (i in 3:n_sh){
data[,n_2+n_sh+i-2] <-(data$t-point_sh[i-1])*data[,n_2+i-1]
}
names(data)[(n_2+n_sh):(n_2+2*n_sh-2)] <- paste0("T_sh",1:(n_sh-1))
if(point_sh[2] == 0){
data <- data[,-(n_2+3)]
}
n_3 = ncol(data)
View(data)
as.matrix(data[,-(1:2)]
)
(n_1-n_mu):(n_1-2)
library(data.table)
library(tidyverse)
library(ismev)
setwd("F:\\StreamFlow")
load("Stream.Rdata")
Stream <- Stream[Q >= 0]
Stream_plot <- Stream[, c("Site", "Q", "DecYear", "Month", "Region")]
## Block
Region1 <- Stream_plot[Region=="01"][,max(Q),by=DecYear]
## Moving_window
x <- Region1
View(x)
?bs
require(stats); require(graphics)
bs(women$height, df = 5)
require(stats)
require(graphics)
bs(women$height, df = 5)
library(splines)
bs(women$height, df = 5)
women$height
summary(fm1 <- lm(weight ~ bs(height, df = 5), data = women))
bs(x$V1, df = 2)
bs(x$V1, df = 3)
bs(x$V1, df = 3, knots = c(4,16))
bs(x$V1, df = 3, knots = 16)
bs(x$V1, df = 2, knots = 16)
x = x$V1
breakpoint <- 16
nr <- length(x)
nc <- length(breakpoint)
data <- matrix(NA, nrow=n, ncol=nc)
data <- matrix(NA, nrow=nr, ncol=nc)
data[,1]<- 1:nr-breakpoint[1]
View(data)
data <- matrix(NA, nrow=nr, ncol=nc)
data[,1]<- 1:nr-breakpoint[1]
breakpoint <- c(4,16)
data <- matrix(NA, nrow=nr, ncol=nc)
data <- matrix(NA, nrow=nr, ncol=nc+1)
x = 1:40
breakpoint <- c(0,breakpoint,+Inf)
for (i in 1:(nc-1)){
data[,i] <- ifelse(x>breakpoint[i-1]&data$t<=breakpoint[i],1,0)
}
View(data)
for (i in 1:(nc-1)){
data[,i] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
for (i in 2:(nc-1)){
data[,i] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
ifelse(x>breakpoint[2-1]&x<=breakpoint[2],1,0)
for (i in 2:nc){
data[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
View(data)
breakpoint
nc
breakpoint <- c(4,16)
breakpoint <- c(0,breakpoint,+Inf)
nr <- length(x)
nc <- length(breakpoint)
data <- matrix(NA, nrow=nr, ncol=nc-2)
for (i in 2:nc){
data[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
data <- matrix(NA, nrow=nr, ncol=nc-1)
for (i in 2:nc){
data[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
View(data)
D <- matrix(NA, nrow=nr, ncol=nc-1)
for (i in 2:nc){
D[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
x-breakpoint[1]
(x-breakpoint[1])*D[,1]
(x-breakpoint[2])*D[,1]
data <- matrix(NA, nrow=nr, ncol=nc-1)
data[,1] <- (x-breakpoint[2])*D[,1]
data[,2] <- (x-breakpoint[2+1])*D[,2]
for(i in 2:nc){
data[,i] <- (x-breakpoint[i+1])*D[,i]
}
for(i in 2:(nc-1)){
data[,i] <- (x-breakpoint[i+1])*D[,i]
}
cut_breakpoint <- function(x, breakpoint=NULL){
if(breakpoint = NULL){
return(NULL)
}
if(breakpoint = 0){
return(x)
}
x = 1:40
breakpoint <- c(4,16)
breakpoint <- c(0,breakpoint,+Inf)
nr <- length(x)
nc <- length(breakpoint)
D <- matrix(NA, nrow=nr, ncol=nc-1)
for (i in 2:nc){
D[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
data <- matrix(NA, nrow=nr, ncol=nc-1)
data[,1] <- (x-breakpoint[2])*D[,1]
for(i in 2:(nc-1)){
data[,i] <- (x-breakpoint[i+1])*D[,i]
}
return(list(D,data))
}
cut_breakpoint <- function(x, breakpoint=NULL){
if(breakpoint = NULL){
return(NULL)
}else{
if(breakpoint = 0){
return(x)
}else{
breakpoint <- c(0,breakpoint,+Inf)
nr <- length(x)
nc <- length(breakpoint)
D <- matrix(NA, nrow=nr, ncol=nc-1)
for (i in 2:nc){
D[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
data <- matrix(NA, nrow=nr, ncol=nc-1)
data[,1] <- (x-breakpoint[2])*D[,1]
for(i in 2:(nc-1)){
data[,i] <- (x-breakpoint[i+1])*D[,i]
}
return(list(D,data))
}
}
}
cut_breakpoint <- function(x, breakpoint=0){
if(breakpoint = NULL){
return(NULL)
}else{
if(breakpoint = 0){
return(x)
}else{
breakpoint <- c(0,breakpoint,+Inf)
nr <- length(x)
nc <- length(breakpoint)
D <- matrix(NA, nrow=nr, ncol=nc-1)
for (i in 2:nc){
D[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
data <- matrix(NA, nrow=nr, ncol=nc-1)
data[,1] <- (x-breakpoint[2])*D[,1]
for(i in 2:(nc-1)){
data[,i] <- (x-breakpoint[i+1])*D[,i]
}
return(list(D,data))
}
}
}
cut_breakpoint <- function(x, breakpoint=0){
breakpoint <- c(0,breakpoint,+Inf)
nr <- length(x)
nc <- length(breakpoint)
D <- matrix(NA, nrow=nr, ncol=nc-1)
for (i in 2:nc){
D[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
data <- matrix(NA, nrow=nr, ncol=nc-1)
data[,1] <- (x-breakpoint[2])*D[,1]
for(i in 2:(nc-1)){
data[,i] <- (x-breakpoint[i+1])*D[,i]
}
return(list(D,data))
}
cut_breakpoint <- function(x, breakpoint=0){
if(breakpoint == NULL){
return(NULL)
}
IF(breakpoint == 0){
return(x)
}
breakpoint <- c(0,breakpoint,+Inf)
nr <- length(x)
nc <- length(breakpoint)
D <- matrix(NA, nrow=nr, ncol=nc-1)
for (i in 2:nc){
D[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
data <- matrix(NA, nrow=nr, ncol=nc-1)
data[,1] <- (x-breakpoint[2])*D[,1]
for(i in 2:(nc-1)){
data[,i] <- (x-breakpoint[i+1])*D[,i]
}
return(list(D,data))
}
cut_breakpoint <- function(x, breakpoint=0){
if(breakpoint == NULL){
return(NULL)
}
if(breakpoint == 0){
return(x)
}
breakpoint <- c(0,breakpoint,+Inf)
nr <- length(x)
nc <- length(breakpoint)
D <- matrix(NA, nrow=nr, ncol=nc-1)
for (i in 2:nc){
D[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
data <- matrix(NA, nrow=nr, ncol=nc-1)
data[,1] <- (x-breakpoint[2])*D[,1]
for(i in 2:(nc-1)){
data[,i] <- (x-breakpoint[i+1])*D[,i]
}
return(list(D,data))
}
cut_breakpoint(1:40, breakpoint = 0)
cut_breakpoint <- function(x, breakpoint=0){
if(breakpoint == NULL){
return(NULL)
break
}
if(breakpoint == 0){
return(x)
break
}
breakpoint <- c(0,breakpoint,+Inf)
nr <- length(x)
nc <- length(breakpoint)
D <- matrix(NA, nrow=nr, ncol=nc-1)
for (i in 2:nc){
D[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
data <- matrix(NA, nrow=nr, ncol=nc-1)
data[,1] <- (x-breakpoint[2])*D[,1]
for(i in 2:(nc-1)){
data[,i] <- (x-breakpoint[i+1])*D[,i]
}
return(list(D,data))
}
cut_breakpoint(1:40, breakpoint = 0)
breakpoint=NULL
if(breakpoint == NULL)
}
breakpoint == NULL
length(breakpoint) == 0
cut_breakpoint <- function(x, breakpoint=0){
if(length(breakpoint) == 0){
return(NULL)
}
if(breakpoint == 0){
return(x)
}
breakpoint <- c(0,breakpoint,+Inf)
nr <- length(x)
nc <- length(breakpoint)
D <- matrix(NA, nrow=nr, ncol=nc-1)
for (i in 2:nc){
D[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
data <- matrix(NA, nrow=nr, ncol=nc-1)
data[,1] <- (x-breakpoint[2])*D[,1]
for(i in 2:(nc-1)){
data[,i] <- (x-breakpoint[i+1])*D[,i]
}
return(list(D,data))
}
cut_breakpoint(1:40, breakpoint = 0)
cut_breakpoint(1:40, breakpoint = NULL)
ma <- cut_breakpoint(1:40, breakpoint = NULL)
cut_breakpoint <- function(x, breakpoint=0, abrupt = FALSE){
if(length(breakpoint) == 0){
return(NULL)
}
if(breakpoint == 0){
return(x)
}
breakpoint <- c(0,breakpoint,+Inf)
nr <- length(x)
nc <- length(breakpoint)
D <- matrix(NA, nrow=nr, ncol=nc-1)
for (i in 2:nc){
D[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
data <- matrix(NA, nrow=nr, ncol=nc-1)
data[,1] <- (x-breakpoint[2])*D[,1]
for(i in 2:(nc-1)){
data[,i] <- (x-breakpoint[i+1])*D[,i]
}
if(abrupt == FALSE){
return(data)
}else{
return(cbind(D,data))
}
}
mul <- cut_breakpoint(1:40, breakpoint = c(4,16))
View(mul)
breakpoint = c(4,16)
breakpoint <- c(0,breakpoint,+Inf)
x <- 1:40
breakpoint = c(4,16)
length(breakpoint) == 0
breakpoint == 0
cut_breakpoint <- function(x, breakpoint=0, abrupt = FALSE){
if(length(breakpoint) == 0){
return(NULL)
}else{
if(length(breakpoint) == 1 & breakpoint[1]==0){
return(x)
}
}
breakpoint <- c(0,breakpoint,+Inf)
nr <- length(x)
nc <- length(breakpoint)
D <- matrix(NA, nrow=nr, ncol=nc-1)
for (i in 2:nc){
D[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
data <- matrix(NA, nrow=nr, ncol=nc-1)
data[,1] <- (x-breakpoint[2])*D[,1]
for(i in 2:(nc-1)){
data[,i] <- (x-breakpoint[i+1])*D[,i]
}
if(abrupt == FALSE){
return(data)
}else{
return(cbind(D,data))
}
}
mul <- cut_breakpoint(1:40, breakpoint = c(4,16))
View(mul)
breakpoint <- c(0,breakpoint,+Inf)
nr <- length(x)
nc <- length(breakpoint)
D <- matrix(NA, nrow=nr, ncol=nc-1)
for (i in 2:nc){
D[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
View(D)
data <- matrix(NA, nrow=nr, ncol=nc-1)
data[,1] <- (x-breakpoint[2])*D[,1]
View(data)
for(i in 2:(nc-1)){
data[,i] <- (x-breakpoint[i+1])*D[,i]
}
View(data)
2:(nc-1)
for(i in 2:(nc-1)){
data[,i] <- (x-breakpoint[i])*D[,i]
}
View(data)
cut_breakpoint <- function(x, breakpoint=0, abrupt = FALSE){
if(length(breakpoint) == 0){
return(NULL)
}else{
if(length(breakpoint) == 1 & breakpoint[1]==0){
return(x)
}
}
breakpoint <- c(0,breakpoint,+Inf)
nr <- length(x)
nc <- length(breakpoint)
D <- matrix(NA, nrow=nr, ncol=nc-1)
for (i in 2:nc){
D[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
data <- matrix(NA, nrow=nr, ncol=nc-1)
data[,1] <- (x-breakpoint[2])*D[,1]
for(i in 2:(nc-1)){
data[,i] <- (x-breakpoint[i])*D[,i]
}
if(abrupt == FALSE){
return(data)
}else{
return(cbind(D,data))
}
}
cut_breakpoint <- function(x, breakpoint=0, abrupt = FALSE){
if(length(breakpoint) == 0){
return(NULL)
}else{
if(length(breakpoint) == 1 & breakpoint[1]==0){
return(x)
}
}
breakpoint <- c(0,breakpoint,+Inf)
nr <- length(x)
nc <- length(breakpoint)
D <- matrix(NA, nrow=nr, ncol=nc-1)
for (i in 2:nc){
D[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
data <- matrix(NA, nrow=nr, ncol=nc-1)
data[,1] <- (x-breakpoint[2])*D[,1]
for(i in 2:(nc-1)){
data[,i] <- (x-breakpoint[i])*D[,i]
}
if(abrupt == FALSE){
return(data)
}else{
return(cbind(D,data))
}
}
x <- 1:40
mul <- cut_breakpoint(1:40, breakpoint = c(4,16))
View(mul)
sigl <- cut_breakpoint(1:40, breakpoint = c(4,16), abrupt = TRUE)
View(sigl)
shl <- cut_breakpoint(1:40, breakpoint = c(4), abrupt = FALSE)
gev.fit(data[,2],cbind(mul,sigl,shl), mul=c(1:3),sigl=c(4:6),shl=c(1:2))
library(data.table)
library(tidyverse)
library(ismev)
setwd("F:\\StreamFlow")
load("Stream.Rdata")
Stream <- Stream[Q >= 0]
Stream_plot <- Stream[, c("Site", "Q", "DecYear", "Month", "Region")]
## Block
Region1 <- Stream_plot[Region=="01"][,max(Q),by=DecYear]
gev.fit(Region1[,2],cbind(mul,sigl,shl), mul=c(1:3),sigl=c(4:6),shl=c(1:2))
mul <- cut_breakpoint(1:40, breakpoint = c(4,16))
sigl <- cut_breakpoint(1:40, breakpoint = c(4,16), abrupt = TRUE)
shl <- cut_breakpoint(1:40, breakpoint = c(4), abrupt = FALSE)
gev.fit(Region1[,2],cbind(mul,sigl,shl), mul=c(1:3),sigl=c(4:6),shl=c(1:2))
mul <- cut_breakpoint(1:40, breakpoint = c(10,16))
sigl <- cut_breakpoint(1:40, breakpoint = c(4,12), abrupt = TRUE)
shl <- cut_breakpoint(1:40, breakpoint = 0, abrupt = FALSE)
gev.fit(Region1[,2],cbind(mul,sigl,shl), mul=c(1:3),sigl=c(4:6),shl=c(1:2))
shl <- cut_breakpoint(1:40, breakpoint = 0, abrupt = FALSE)
gev.fit(Region1[,2],cbind(mul,sigl,shl), mul=c(1:3),sigl=c(4:6),shl=c(1))
cbind(mul,sigl,shl)
gev.fit(Region1[,2],as.matrix(cbind(mul,sigl,shl)), mul=c(1:3),sigl=c(4:6),shl=c(1))
rm(gauge, Region_name, Siteinfo, Stream, Stream_plot)
mul <- cut_breakpoint(1:40, breakpoint = c(10,16))
sigl <- cut_breakpoint(1:40, breakpoint = c(4,12), abrupt = TRUE)
shl <- cut_breakpoint(1:40, breakpoint = 0, abrupt = FALSE)
y <- as.matrix(cbind(mul,sigl,shl))
View(y)
shl <- cut_breakpoint(1:40)
mul <- cut_breakpoint(1:40)
sigl <- cut_breakpoint(1:40)
shl <- cut_breakpoint(1:40)
y <- as.matrix(cbind(mul,sigl,shl))
gev.fit(Region1[,2],as.matrix(cbind(mul,sigl,shl)), mul=1,sigl=2,shl=3)
View(y)
gev.fit(Region1[,2],y, mul=1,sigl=2,shl=3)
gev.fit(Region1[,2],y, mul=1,sigl=1,shl=1)
Region1[,2]
?gev.fit
gev.fit(Region1[,2],y, mul=1,sigl=1,shl=1)
gev.fit(Region1[,2])
View(Region1)
gev.fit(Region1$V1)
gev.fit(Region1$V1,y,mul=1,sigl=1,shl=1)
mul <- cut_breakpoint(1:40, 10)
sigl <- cut_breakpoint(1:40, 16)
shl <- cut_breakpoint(1:40)
y <- as.matrix(cbind(mul,sigl,shl))
View(y)
gev.fit(Region1$V1,y,mul=c(1:2),sigl=c(3:4),shl=1)
gev.fit(Region1$V1,y,mul=c(1:2),sigl=c(3:4),shl=5)
mul <- cut_breakpoint(1:40, 10, abrupt = TRUE)
sigl <- cut_breakpoint(1:40, 16)
shl <- cut_breakpoint(1:40)
y <- as.matrix(cbind(mul,sigl,shl))
View(y)
gev.fit(Region1$V1,y,mul=c(1:4),sigl=c(5:6),shl=7)
