est <- cbind(1:40,est)
est <- as.data.frame(est)
names(est) <- c("t","mu","U","L")
ggplot(est ,aes(x=t,y=mu))+
geom_line()+
geom_line(aes(x=t,y=U),linetype=2)+
geom_line(aes(x=t,y=L),linetype=2)+
# geom_line(data = est_mu_fit3, aes(x=t,y=est,color=I("orange")))+
# geom_line(data = est_mu_fit4, aes(x=t,y=est, color=I("purple")))+
# geom_line(data = est_mu_fit4, aes(x=t,y=U),linetype=2)+
geom_point(data = MOV, aes(x=t, y=location, color=I("blue")))+
geom_point(data = Region1, aes(x=DecYear-1980, y=V1,color="red"))+
xlab("t")+
ylab(expression(mu(t)))
ci.fit2
fit2$mle[1:2]
for(i in 1:40){
b <- cbind(1,single)[i,]
est[i,1] <- t(b) %*% fit2$mle[1:2]
est[i,2] <- t(b) %*% fit2$mle[1:2]+qnorm(0.975)*sqrt(t(b)%*%fit2$cov[1:2,1:2]%*%b)
est[i,3] <- t(b) %*% fit2$mle[1:2]-qnorm(0.975)*sqrt(t(b)%*%fit2$cov[1:2,1:2]%*%b)
}
fit2$mle
b
cbind(1,single)
nrow(x)
CI <- function(x, mle, cov){
est <- matrix(NA, ncol=3,nrow=nrow(x))
for(i in 1:nrow(x)){
b <- x[i,]
est[i,1] <- t(b) %*% mle
est[i,2] <- t(b) %*% mle+qnorm(0.975)*sqrt(t(b)%*%cov%*%b)
est[i,3] <- t(b) %*% mle-qnorm(0.975)*sqrt(t(b)%*%cov%*%b)
}
est <- as.data.frame(est)
names(est) <- c("est","U","L")
}
CI(cbind(1,single),fit2$mle[1:2],cov[1:2,1:2])
CI(cbind(1,single),fit2$mle[1:2],fit2$cov[1:2,1:2])
CI <- function(x, mle, cov){
est <- matrix(NA, ncol=3,nrow=nrow(x))
for(i in 1:nrow(x)){
b <- x[i,]
est[i,1] <- t(b) %*% mle
est[i,2] <- t(b) %*% mle+qnorm(0.975)*sqrt(t(b)%*%cov%*%b)
est[i,3] <- t(b) %*% mle-qnorm(0.975)*sqrt(t(b)%*%cov%*%b)
}
est <- as.data.frame(est)
names(est) <- c("est","U","L")
return(est)
}
CI(cbind(1,single),fit2$mle[1:2],fit2$cov[1:2,1:2])
CI <- function(x, mle, cov){
est <- matrix(NA, ncol=3,nrow=nrow(x))
for(i in 1:nrow(x)){
b <- x[i,]
est[i,1] <- t(b) %*% mle
est[i,2] <- t(b) %*% mle+qnorm(0.975)*sqrt(t(b)%*%cov%*%b)
est[i,3] <- t(b) %*% mle-qnorm(0.975)*sqrt(t(b)%*%cov%*%b)
}
est <- as.data.frame(est)
est <- cbind(1:40, est)
names(est) <- c("t","est","U","L")
return(est)
}
CI(cbind(1,single),fit2$mle[1:2],fit2$cov[1:2,1:2])
fit3$model
fit3$`which is double`
double <- cut_breakpoint(1:40, breakpoint=16, abrupt = FALSE)
double
CI(cbind(1,doublt),fit2$mle[1:3],fit2$cov[1:3,1:3])
CI(cbind(1,double),fit2$mle[1:3],fit2$cov[1:3,1:3])
fit4$`which is quad`
CI(cbind(1,1:40,(1:40)^2),fit4$mle[1:3],fit4$cov[1:3,1:3])
CI(cbind(1,double),fit3$mle[1:3],fit3$cov[1:3,1:3])
fit_single <- function(x,y){
fit1 <- gev.fit(x, y, mul=1)
fit2 <- gev.fit(x, y, sigl=1)
fit3 <- gev.fit(x, y, shl=1)
fit4 <- gev.fit(x, y, mul=1, sigl=1)
fit5 <- gev.fit(x, y, mul=1, shl=1)
fit6 <- gev.fit(x, y, sigl=1, shl=1)
fit7 <- gev.fit(x, y, mul=1, sigl=1, shl=1)
model=c("mul","sigl","shl","mul,sigl","mul,shl","sigl,shl","mul,sigl,shl")
log <- numeric(7)
for(i in 1:7){
log[i] <- get(paste0("fit",i))$nllh
}
fit <- get(paste0("fit", which.min(log)))
fit[["which is single"]] <- model[which.min(log)]
return(fit)
}
fit_double <- function(x,mu,sig,sh){
single <- cut_breakpoint(1:40, breakpoint=0)
mul <- cut_breakpoint(1:40, mu)
sigl <- cut_breakpoint(1:40, sig)
shl <- cut_breakpoint(1:40, sh)
model <- c("mu=double,sig=s,sh=s",
"mu=s,sig=double,sh=s",
"mu=s,sig=s,sh=double",
"mu=double,sig=single,sh=s",
"mu=double,sig=s,sh=single",
"mu=single,sig=double,sh=s",
"mu=s,sig=double,sh=single",
"mu=single,sig=s,sh=double",
"mu=s,sig=single,sh=double",
"mu=double,sig=single,sh=single",
"mu=single,sig=double,sh=single",
"mu=single,sig=single,sh=double",
"mu=double,sig=double,sh=s",
"mu=double,sig=s,sh=double",
"mu=s,sig=double,sh=double",
"mu=double,sig=double,sh=single",
"mu=double,sig=single,sh=double",
"mu=single,sig=double,sh=double",
"mu=double,sig=double,sh=double")
# double, s,s
y <- mul
fit1 <- gev.fit(x,y,mul=c(1:2))
y <- sigl
fit2 <- gev.fit(x,y,sigl=c(1:2))
y <- shl
fit3 <- gev.fit(x,y,shl=c(1:2))
# double, s, single
y <- cbind(single,mul)
fit4 <- gev.fit(x,y,mul=c(2:3), sigl = 1)
fit5 <- gev.fit(x,y,mul=c(2:3), shl = 1)
y <- cbind(single,sigl)
fit6 <- gev.fit(x,y,mul=1, sigl = c(2:3))
fit7 <- gev.fit(x,y,sigl = c(2:3), shl = 1)
y <- cbind(single,shl)
fit8 <- gev.fit(x,y,mul=1, shl = c(2:3))
fit9 <- gev.fit(x,y,sigl = 1, shl = c(2:3))
# double, single, single
y <- cbind(single,mul)
fit10 <- gev.fit(x,y,mul=c(2:3), sigl = 1, shl = 1)
fit11 <- gev.fit(x,y,mul=c(2:3), sigl = 1, shl = 1)
y <- cbind(single,sigl)
fit12 <- gev.fit(x,y,mul=1, sigl = c(2:3), shl = 1)
fit13 <- gev.fit(x,y,mul=1, sigl = c(2:3), shl = 1)
y <- cbind(single,shl)
fit14 <- gev.fit(x,y,mul=1, sigl = 1,shl = c(2:3))
fit15 <- gev.fit(x,y,mul=1, sigl = 1, shl = c(2:3))
# double, double, s
y <- cbind(mul, sigl)
fit16 <- gev.fit(x,y,mul=c(1:2), sigl = c(3:4))
y <- cbind(mul, shl)
fit17 <- gev.fit(x,y,mul=c(1:2), shl = c(3:4))
y <- cbind(sigl, shl)
fit18 <- gev.fit(x,y,sigl=c(1:2), shl = c(3:4))
# double, double, single
y <- cbind(single, mul, sigl)
fit19 <- gev.fit(x,y,mul=c(2:3), sigl = c(4:5), shl = 1)
y <- cbind(single, mul, shl)
fit20 <- gev.fit(x,y,mul=c(2:3), sigl = 1, shl = c(4:5))
y <- cbind(single, sigl, shl)
fit21 <- gev.fit(x,y,mul=1, sigl = c(2:3), shl = c(4:5))
# double, double, double
y <- cbind(mul, sigl, shl)
fit21 <- gev.fit(x,y,mul=c(1:2), sigl = c(3:4), shl = c(5:6))
log <- numeric(21)
for(i in 1:21){
log[i] <- get(paste0("fit",i))$nllh
}
fit <- get(paste0("fit", which.min(log)))
fit[["which is double"]] <- model[which.min(log)]
return(fit)
}
fit_quad <- function(x){
single <- as.matrix(1:40)
quad <- single^2
model <- c("mu=quad,sig=s,sh=s",
"mu=s,sig=quad,sh=s",
"mu=s,sig=s,sh=quad",
"mu=quad,sig=single,sh=s",
"mu=quad,sig=s,sh=single",
"mu=single,sig=quad,sh=s",
"mu=s,sig=quad,sh=single",
"mu=single,sig=s,sh=quad",
"mu=s,sig=single,sh=quad",
"mu=quad,sig=single,sh=single",
"mu=single,sig=quad,sh=single",
"mu=single,sig=single,sh=quad",
"mu=quad,sig=quad,sh=s",
"mu=quad,sig=s,sh=quad",
"mu=s,sig=quad,sh=quad",
"mu=quad,sig=quad,sh=single",
"mu=quad,sig=single,sh=quad"
# "mu=single,sig=quad,sh=quad",
)
# quad, s, s
y <- cbind(single,quad)
fit1 <- gev.fit(x,y, mul=c(1:2))
fit2 <- gev.fit(x,y, sigl=c(1:2))
fit3 <- gev.fit(x,y, shl=c(1:2))
# quad, s, single
y <- cbind(single,quad)
fit4 <- gev.fit(x,y, mul=c(1:2),sigl = 1)
fit5 <- gev.fit(x,y, mul=c(1:2),shl = 1)
fit6 <- gev.fit(x,y, mul=1, sigl=c(1:2))
fit7 <- gev.fit(x,y, sigl=c(1:2), shl=1)
fit8 <- gev.fit(x,y, mul=1,shl=c(1:2))
fit9 <- gev.fit(x,y, sigl=1,shl=c(1:2))
# quad, single, single
fit10 <- gev.fit(x,y, mul=c(1:2),sigl = 1, shl=1)
fit11 <- gev.fit(x,y, mul=1,sigl = c(1:2), shl=1)
fit12 <- gev.fit(x,y, mul=1,sigl = 1, shl=c(1:2))
# quad, quad, s
fit13 <- gev.fit(x,y, mul=c(1:2),sigl = c(1:2), shl=1)
fit14 <- gev.fit(x,y, mul=c(1:2),sigl = 1, shl=c(1:2))
fit15 <- gev.fit(x,y, mul=1,sigl = c(1:2), shl=c(1:2))
# quad, quad, single
fit16 <- gev.fit(x,y, mul=c(1:2),sigl = c(1:2), shl=1)
fit17 <- gev.fit(x,y, mul=c(1:2),sigl = 1, shl=c(1:2))
fit18 <- gev.fit(x,y, mul=1,sigl = c(1:2), shl=c(1:2))
# quad, quad, quad
# fit19 <- gev.fit(x,y, mul=c(1:2),sigl = c(1:2), shl=c(1:2))
log <- numeric(18)
for(i in 1:18){
log[i] <- get(paste0("fit",i))$nllh
}
fit <- get(paste0("fit", which.min(log)))
fit[["which is quad"]] <- model[which.min(log)]
return(fit)
}
fit_abrupt <- function(x,mu,sig,sh){
single <- cut_breakpoint(1:40, breakpoint=0)
mul <- cut_breakpoint(1:40, mu)
sigl <- cut_breakpoint(1:40, sig)
shl <- cut_breakpoint(1:40, sh)
mul_a <- cut_breakpoint(1:40, mu, TRUE)
sigl_a <- cut_breakpoint(1:40, sig, TRUE)
shl_a <- cut_breakpoint(1:40, sh, TRUE)
# double_a, s,s
y <- mul_a
fit1 <- gev.fit(x,y,mul=c(1:4))
y <- sigl_a
fit2 <- gev.fit(x,y,sigl=c(1:4))
y <- shl_a
fit3 <- gev.fit(x,y,shl=c(1:4))
# double_a, s, single
y <- cbind(single,mul_a)
fit4 <- gev.fit(x,y,mul=c(2:5), sigl = 1)
fit5 <- gev.fit(x,y,mul=c(2:5), shl = 1)
y <- cbind(single,sigl_a)
fit6 <- gev.fit(x,y,mul=1, sigl = c(2:5))
fit7 <- gev.fit(x,y,sigl = c(2:5), shl = 1)
y <- cbind(single,shl_a)
fit8 <- gev.fit(x,y,mul=1, shl = c(2:5))
fit9 <- gev.fit(x,y,sigl = 1, shl = c(2:5))
# double_a, single, single
y <- cbind(single,mul_a)
fit10 <- gev.fit(x,y,mul=c(2:5), sigl = 1, shl = 1)
fit11 <- gev.fit(x,y,mul=c(2:5), sigl = 1, shl = 1)
y <- cbind(single,sigl_a)
fit12 <- gev.fit(x,y,mul=1, sigl = c(2:5), shl = 1)
fit13 <- gev.fit(x,y,mul=1, sigl = c(2:5), shl = 1)
y <- cbind(single,shl_a)
fit14 <- gev.fit(x,y,mul=1, sigl = 1,shl = c(2:5))
fit15 <- gev.fit(x,y,mul=1, sigl = 1, shl = c(2:5))
# double_a, double_a, s
y <- cbind(mul_a, sigl_a)
fit16 <- gev.fit(x,y,mul=c(1:4), sigl = c(5:8))
y <- cbind(mul_a, shl_a)
fit17 <- gev.fit(x,y,mul=c(1:4), shl = c(5:8))
y <- cbind(sigl_a, shl_a)
fit18 <- gev.fit(x,y,sigl=c(1:4), shl = c(5:8))
# double_a, double_a, single
y <- cbind(single, mul_a, sigl_a)
fit19 <- gev.fit(x,y,mul=c(2:5), sigl = c(6:9), shl = 1)
y <- cbind(single, mul_a, shl_a)
fit20 <- gev.fit(x,y,mul=c(2:5), sigl = 1, shl = c(6:9))
y <- cbind(single, sigl_a, shl_a)
fit21 <- gev.fit(x,y,mul=1, sigl = c(2:5), shl = c(6:9))
# double_a, double_a, double_a
y <- cbind(mul_a, sigl_a, shl_a)
fit21 <- gev.fit(x,y,mul=c(1:4), sigl = c(5:8), shl = c(9:12))
log <- numeric(21)
for(i in 1:21){
log[i] <- get(paste0("fit",i))$nllh
}
return(log)
}
cut_breakpoint <- function(x, breakpoint=0, abrupt = FALSE){
if(length(breakpoint) == 0){
return(NULL)
}else{
if(length(breakpoint) == 1 & breakpoint[1]==0){
return(as.matrix(x))
}
}
breakpoint <- c(-Inf,breakpoint,+Inf)
nr <- length(x)
nc <- length(breakpoint)
D <- matrix(NA, nrow=nr, ncol=nc-1)
for (i in 2:nc){
D[,i-1] <- ifelse(x>breakpoint[i-1]&x<=breakpoint[i],1,0)
}
data <- matrix(NA, nrow=nr, ncol=nc-1)
data[,1] <- (x-breakpoint[2])*D[,1]
for(i in 2:(nc-1)){
data[,i] <- (x-breakpoint[i])*D[,i]
}
if(abrupt == FALSE){
return(data)
}else{
return(cbind(D,data))
}
}
library(data.table)
library(tidyverse)
library(ismev)
setwd("F:\\StreamFlow")
load("Stream.Rdata")
Stream <- Stream[Q >= 0]
Stream_plot <- Stream[, c("Site", "Q", "DecYear", "Month", "Region")]
## Block
Region1 <- Stream_plot[Region=="01"][,max(Q),by=DecYear]
x <- Region1$V1
#### single ####
single <- cut_breakpoint(1:40, breakpoint=0, abrupt = FALSE)
fit2 <- fit_single(x,single)
est2 <- CI(cbind(1,single),fit2$mle[1:2],fit2$cov[1:2,1:2])
CI <- function(x, mle, cov){
est <- matrix(NA, ncol=3,nrow=nrow(x))
for(i in 1:nrow(x)){
b <- x[i,]
est[i,1] <- t(b) %*% mle
est[i,2] <- t(b) %*% mle+qnorm(0.975)*sqrt(t(b)%*%cov%*%b)
est[i,3] <- t(b) %*% mle-qnorm(0.975)*sqrt(t(b)%*%cov%*%b)
}
est <- as.data.frame(est)
est <- cbind(1:40, est)
names(est) <- c("t","est","U","L")
return(est)
}
est2 <- CI(cbind(1,single),fit2$mle[1:2],fit2$cov[1:2,1:2])
fit3 <- fit_double(x,16,16,25)
fit3$`which is double`
double <- cut_breakpoint(1:40, breakpoint=16, abrupt = FALSE)
est3 <- CI(cbind(1,double),fit3$mle[1:3],fit3$cov[1:3,1:3])
est4 <- CI(cbind(1,1:40,(1:40)^2),fit4$mle[1:3],fit4$cov[1:3,1:3])
fit4 <- fit_quad(x)
fit4$`which is quad`
est4 <- CI(cbind(1,1:40,(1:40)^2),fit4$mle[1:3],fit4$cov[1:3,1:3])
est4
MOV <- Moving_window(x=Region1, win = 10, url = "F:/StreamFlow/Plot/Moving_Windows",
save = FALSE, name = quote(Region1))
Moving_window <- function(x, win=15, url, save=TRUE, name){
n_row = nrow(x)
n_sep = round(win/2)
#  fit <- gev.fit(x$V1)
#  shape <- fit$mle[3]
parameter <- as.data.frame(matrix(NA, ncol=4, nrow=n_row))
names(parameter) <- c("t","location","scale","shape")
for (i in 1:(n_row-2*n_sep)){
fit <- gev.fit(x$V1[i:(i+win)])
parameter[i+n_sep,1] <- i+n_sep
parameter[i+n_sep,2:4] <- fit$mle
}
if(save == TRUE){
ggplot(parameter, aes(x=t, y=location))+
geom_point()+
xlab("t")+
ylab("location")+
ggsave(paste0(url,"/","location",name,".png"), plot=last_plot(),height=3,width=4)
ggplot(parameter, aes(x=t, y=scale))+
geom_point()+
xlab("t")+
ylab("scale")
ggsave(paste0(url,"/","scale",name,".png"), plot=last_plot(),height=3,width=4)
ggplot(parameter, aes(x=t, y=shape))+
geom_point()+
xlab("t")+
ylab("shape")
ggsave(paste0(url,"/","shape",name,".png"), plot=last_plot(),height=3,width=4)
}
return(parameter)
}
MOV <- Moving_window(x=Region1, win = 10, url = "F:/StreamFlow/Plot/Moving_Windows",
save = FALSE, name = quote(Region1))
ggplot(est2 ,aes(x=t,y=est))+
geom_line()+
geom_line(aes(x=t,y=U),linetype=2)+
geom_line(aes(x=t,y=L),linetype=2)+
# geom_line(data = est_mu_fit3, aes(x=t,y=est,color=I("orange")))+
# geom_line(data = est_mu_fit4, aes(x=t,y=est, color=I("purple")))+
# geom_line(data = est_mu_fit4, aes(x=t,y=U),linetype=2)+
geom_point(data = MOV, aes(x=t, y=location, color=I("blue")))+
geom_point(data = Region1, aes(x=DecYear-1980, y=V1,color="red"))+
xlab("t")+
ylab(expression(mu(t)))
ggplot(est2 ,aes(x=t,y=est))+
geom_line()+
geom_line(aes(x=t,y=U),linetype=2)+
geom_line(aes(x=t,y=L),linetype=2)+
geom_line(data = est3, aes(x=t,y=est,color=I("orange")))+
# geom_line(data = est_mu_fit4, aes(x=t,y=est, color=I("purple")))+
# geom_line(data = est_mu_fit4, aes(x=t,y=U),linetype=2)+
geom_point(data = MOV, aes(x=t, y=location, color=I("blue")))+
geom_point(data = Region1, aes(x=DecYear-1980, y=V1,color="red"))+
xlab("t")+
ylab(expression(mu(t)))
est3
fit3$vals
cbind(1,double)
x = cbind(1,double)
est <- matrix(NA, ncol=3,nrow=nrow(x))
fit3
fit3$mle[1:3]
b <- x[1,]
b
t(b) %*% mle
mle <- fit3$mle[1:3]
t(b) %*% mle
fit3$vals
fit3 <- fit_double(x,16,16,25)
fit3$`which is double`
x <- Region1$V1
#### double ####
fit3 <- fit_double(x,16,16,25)
View(fit3)
fit3$`which is double`
cbind(single,shl)
fit_double <- function(x,mu,sig,sh){
single <- cut_breakpoint(1:40, breakpoint=0)
mul <- cut_breakpoint(1:40, mu)
sigl <- cut_breakpoint(1:40, sig)
shl <- cut_breakpoint(1:40, sh)
model <- c("mu=double,sig=s,sh=s",
"mu=s,sig=double,sh=s",
"mu=s,sig=s,sh=double",
#45
"mu=double,sig=single,sh=s",
"mu=double,sig=s,sh=single",
#67
"mu=single,sig=double,sh=s",
"mu=s,sig=double,sh=single",
#89
"mu=single,sig=s,sh=double",
"mu=s,sig=single,sh=double",
#10 11 12
"mu=double,sig=single,sh=single",
"mu=single,sig=double,sh=single",
"mu=single,sig=single,sh=double",
#13 14 15
"mu=double,sig=double,sh=s",
"mu=double,sig=s,sh=double",
"mu=s,sig=double,sh=double",
#16 17 18
"mu=double,sig=double,sh=single",
"mu=double,sig=single,sh=double",
"mu=single,sig=double,sh=double",
# 19
"mu=double,sig=double,sh=double")
# double, s,s
y <- mul
fit1 <- gev.fit(x,y,mul=c(1:2))
y <- sigl
fit2 <- gev.fit(x,y,sigl=c(1:2))
y <- shl
fit3 <- gev.fit(x,y,shl=c(1:2))
# double, s, single
y <- cbind(single,mul)
fit4 <- gev.fit(x,y,mul=c(2:3), sigl = 1)
fit5 <- gev.fit(x,y,mul=c(2:3), shl = 1)
y <- cbind(single,sigl)
fit6 <- gev.fit(x,y,mul=1, sigl = c(2:3))
fit7 <- gev.fit(x,y,sigl = c(2:3), shl = 1)
y <- cbind(single,shl)
fit8 <- gev.fit(x,y,mul=1, shl = c(2:3))
fit9 <- gev.fit(x,y,sigl = 1, shl = c(2:3))
# double, single, single
y <- cbind(single,mul)
fit10 <- gev.fit(x,y,mul=c(2:3), sigl = 1, shl = 1)
y <- cbind(single,sigl)
fit11 <- gev.fit(x,y,mul=1, sigl = c(2:3), shl = 1)
y <- cbind(single,shl)
fit12 <- gev.fit(x,y,mul=1, sigl = 1,shl = c(2:3))
# double, double, s
y <- cbind(mul, sigl)
fit13 <- gev.fit(x,y,mul=c(1:2), sigl = c(3:4))
y <- cbind(mul, shl)
fit14 <- gev.fit(x,y,mul=c(1:2), shl = c(3:4))
y <- cbind(sigl, shl)
fit15 <- gev.fit(x,y,sigl=c(1:2), shl = c(3:4))
# double, double, single
y <- cbind(single, mul, sigl)
fit16 <- gev.fit(x,y,mul=c(2:3), sigl = c(4:5), shl = 1)
y <- cbind(single, mul, shl)
fit17 <- gev.fit(x,y,mul=c(2:3), sigl = 1, shl = c(4:5))
y <- cbind(single, sigl, shl)
fit18 <- gev.fit(x,y,mul=1, sigl = c(2:3), shl = c(4:5))
# double, double, double
y <- cbind(mul, sigl, shl)
fit19 <- gev.fit(x,y,mul=c(1:2), sigl = c(3:4), shl = c(5:6))
log <- numeric(19)
for(i in 1:19){
log[i] <- get(paste0("fit",i))$nllh
}
fit <- get(paste0("fit", which.min(log)))
fit[["which is double"]] <- model[which.min(log)]
return(fit)
}
#### double ####
fit3 <- fit_double(x,16,16,25)
library(ismev)
#### double ####
fit3 <- fit_double(x,16,16,25)
est3 <- CI(cbind(1,double),fit3$mle[1:3],fit3$cov[1:3,1:3])
est3
fit3
