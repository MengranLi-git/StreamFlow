geom_line(aes(x = t, y = U, color = Group), linetype = 2, size = I(1)) +
geom_line(aes(x = t, y = L, color = Group), linetype = 2, size = I(1)) +
xlab(paste0("Region", n,"  ", "t")) +
ylab(expression(xi(t)))
p <- list(p1, p2, p3)
#  p <- grid.arrange(p1,p2,p3,nrow=3)
#  ggsave(paste0("Region",n,".png"),p,path="F:/Streamflow/Plot/Fit",width=6,height=6)
return(p)
}
gra <- list()
for(i in 1:18){
assign("Region",Stream_plot[Region==index[i]][,max(Q),by=DecYear])
#MOV
MOV <- Moving_window(x=Region, win = 10, url = "F:/StreamFlow/Plot/Moving_Windows",
save = FALSE, name = quote(Region1))
x <- Region$V1
fit <- linear(x,16,22,26)
fit2 <- quad(x)
est <- graph_data(fit,fit2)
gra[[i]] <- plot_para(est[[1]],est[[2]],est[[3]],Region,i)
}
plot_final <- list()
for(i in 1:6){
p <- gra[[i]]
plot_final[[3*(i-1)+1]] <- p[[1]]
plot_final[[3*(i-1)+2]] <- p[[2]]
plot_final[[3*(i-1)+3]] <- p[[3]]
}
plot_final[["ncol"]] = 3
plot_final[["nrow"]] = 6
do.call(grid.arrange,plot_final)
do.call(grid.arrange,plot_final)
i =6
assign("Region",Stream_plot[Region==index[i]][,max(Q),by=DecYear])
#MOV
MOV <- Moving_window(x=Region, win = 10, url = "F:/StreamFlow/Plot/Moving_Windows",
save = FALSE, name = quote(Region1))
x <- Region$V1
fit <- linear(x,16,22,26)
fit2 <- quad(x)
est <- graph_data(fit,fit2)
View(est)
est$est_sh
fit$double_fit[["vals"]]
x <- Region
x <- Region
fit$double_fit$formulation
mu=16
sig=22
sh=26
co <- data.frame(mu = NA, sig = NA, sh = NA)
n <- 1
for (i in 1:3) {
for (j in 1:3) {
for (h in 1:3) {
co[n, 1] <- para[i]
co[n, 2] <- para[j]
co[n, 3] <- para[h]
n <- n + 1
}
}
}
para=c("double", "single", "s")
co <- data.frame(mu = NA, sig = NA, sh = NA)
n <- 1
for (i in 1:3) {
for (j in 1:3) {
for (h in 1:3) {
co[n, 1] <- para[i]
co[n, 2] <- para[j]
co[n, 3] <- para[h]
n <- n + 1
}
}
}
single <- 1:length(x)
double_mu <- cut_breakpoint(1:length(x), mu)
double_sig <- cut_breakpoint(1:length(x), sig)
double_sh <- cut_breakpoint(1:length(x), sh)
double_sh
1:length(x)
x
x <- Region$V1
co <- data.frame(mu = NA, sig = NA, sh = NA)
n <- 1
for (i in 1:3) {
for (j in 1:3) {
for (h in 1:3) {
co[n, 1] <- para[i]
co[n, 2] <- para[j]
co[n, 3] <- para[h]
n <- n + 1
}
}
}
single <- 1:length(x)
double_mu <- cut_breakpoint(1:length(x), mu)
double_sig <- cut_breakpoint(1:length(x), sig)
double_sh <- cut_breakpoint(1:length(x), sh)
double_sh
rank_single <- which(!apply(co,1,function(x) "double" %in% x))
rank_double <- c(1:27)[-rank_single]
rank_single <- rank_single[-length(rank_single)]
rank_single
rank_double
View(co)
i = 25
com <- co[i, ]
ll_mu <- ll(com$mu, para, double_mu)
ll_sig <- ll(com$sig, para, double_sig)
ll_sh <- ll(com$sh, para, double_sh)
ll_sh
ll_sig
ll_mu
y <- cbind(1, ll_mu[[2]], ll_sig[[2]], ll_sh[[2]])
y
if (is_empty(ll_mu[[1]])) {
mul <- NULL
loc_mu <- 1
} else {
mul <- ll_mu[[1]] + 1
loc_mu <- c(1, mul)
}
if (is_empty(ll_sig[[1]])) {
sigl <- NULL
loc_sig <- max(loc_mu) + 1
} else {
if (is_empty(mul)) {
sigl <- 1 + ll_sig[[1]]
loc_sig <- c(max(loc_mu), sigl) + 1
} else {
sigl <- max(mul) + ll_sig[[1]]
loc_sig <- c(max(loc_mu), sigl) + 1
}
}
if (is_empty(ll_sh[[1]])) {
shl <- NULL
loc_sh <- max(loc_sig) + 1
} else {
if (is_empty(sigl)) {
if (is_empty(mul)) {
shl <- 1 + ll_sh[[1]]
loc_sh <- c(max(loc_sig), shl+1) +1
} else {
shl <- max(mul) + ll_sh[[1]]
loc_sh <- c(max(loc_sig), shl+1) +1
}
} else {
shl <- max(sigl) + ll_sh[[1]]
loc_sh <- c(max(loc_sig), shl+1) +1
}
}
loc_sh
loc_sig
loc_mu
fit <- try(gev.fit(x, y, mul = mul, sigl = sigl, shl = shl),silent=TRUE)
if('try-error' %in% class(fit)){
fit <- NULL
name <- paste0("fit", i)
assign(name, fit)
next
}else{
fit <- gev.fit(x, y, mul = mul, sigl = sigl, shl = shl)
fit[["AIC"]] <- 2 * (length(fit$mle) + fit$nllh)
fit[["formulation"]] <- com
fit[["est_mu"]] <- CI(as.matrix(cbind(rep(1, 40), ll_mu[[2]])), fit$mle[loc_mu], fit$cov[loc_mu, loc_mu])
fit[["est_sig"]] <- CI(as.matrix(cbind(rep(1, 40), ll_sig[[2]])), fit$mle[loc_sig], fit$cov[loc_sig, loc_sig])
fit[["est_sh"]] <- CI(as.matrix(cbind(rep(1, 40), ll_sh[[2]])), fit$mle[loc_sh], fit$cov[loc_sh, loc_sh])
name <- paste0("fit", i )
assign(name, fit)
}
fit
point <- data.frame(mu=c(16,20,20,30,20,20,16,20,16,20,16,20,20,16,20,25,27,20),
sig=c(20,30,25,20,20,27,16,20,20,20,20,20,16,16,25,26,25,20),
sh=c(15,30,22,20,14,18,25,25,20,16,20,20,20,20,25,25,25,25))
gra <- list()
for(i in 1:18){
assign("Region",Stream_plot[Region==index[i]][,max(Q),by=DecYear])
#MOV
MOV <- Moving_window(x=Region, win = 10, url = "F:/StreamFlow/Plot/Moving_Windows",
save = FALSE, name = quote(Region1))
x <- Region$V1
fit <- linear(x,point[i,1],point[i,2],point[i,3])
fit2 <- quad(x)
gra[[i]] <- plot_para(est[[1]],est[[2]],est[[3]],Region,i)
}
plot_final <- list()
for(i in 1:6){
p <- gra[[i]]
plot_final[[3*(i-1)+1]] <- p[[1]]
plot_final[[3*(i-1)+2]] <- p[[2]]
plot_final[[3*(i-1)+3]] <- p[[3]]
}
plot_final[["ncol"]] = 3
plot_final[["nrow"]] = 6
do.call(grid.arrange,plot_final)
View(linear)
setwd("F:/Streamflow/code/")
source("CI.R")
source("cut_breakpoint.R")
source("abrupt_shift.R")
source("Moving_window.R")
source("ll.R")
source("linear.R")
source("quad.R")
source("graph_data.R")
source("plot_para.R")
library(data.table)
library(tidyverse)
library(ismev)
library(gridExtra)
setwd("F:\\StreamFlow")
load("Stream.Rdata")
Stream <- Stream[Q >= 0]
Stream_plot <- Stream[, c("Site", "Q", "DecYear", "Month", "Region")]
index <- Region_name[-(19:21),2]
gra <- list()
for(i in 1:18){
assign("Region",Stream_plot[Region==index[i]][,max(Q),by=DecYear])
#MOV
MOV <- Moving_window(x=Region, win = 10, url = "F:/StreamFlow/Plot/Moving_Windows",
save = FALSE, name = quote(Region1))
x <- Region$V1
fit <- linear(x,point[i,1],point[i,2],point[i,3])
fit2 <- quad(x)
gra[[i]] <- plot_para(est[[1]],est[[2]],est[[3]],Region,i)
}
point <- data.frame(mu=c(16,20,20,30,20,20,16,20,16,20,16,20,20,16,20,25,27,20),
sig=c(20,30,25,20,20,27,16,20,20,20,20,20,16,16,25,26,25,20),
sh=c(15,30,22,20,14,18,25,25,20,16,20,20,20,20,25,25,25,25))
gra <- list()
for(i in 1:18){
assign("Region",Stream_plot[Region==index[i]][,max(Q),by=DecYear])
#MOV
MOV <- Moving_window(x=Region, win = 10, url = "F:/StreamFlow/Plot/Moving_Windows",
save = FALSE, name = quote(Region1))
x <- Region$V1
fit <- linear(x,point[i,1],point[i,2],point[i,3])
fit2 <- quad(x)
gra[[i]] <- plot_para(est[[1]],est[[2]],est[[3]],Region,i)
}
plot_final <- list()
for(i in 1:6){
p <- gra[[i]]
plot_final[[3*(i-1)+1]] <- p[[1]]
plot_final[[3*(i-1)+2]] <- p[[2]]
plot_final[[3*(i-1)+3]] <- p[[3]]
}
plot_final[["ncol"]] = 3
plot_final[["nrow"]] = 6
gra <- list()
for(i in 1:18){
assign("Region",Stream_plot[Region==index[i]][,max(Q),by=DecYear])
#MOV
MOV <- Moving_window(x=Region, win = 10, url = "F:/StreamFlow/Plot/Moving_Windows",
save = FALSE, name = quote(Region1))
x <- Region$V1
fit <- linear(x,point[i,1],point[i,2],point[i,3])
fit2 <- quad(x)
gra[[i]] <- plot_para(est[[1]],est[[2]],est[[3]],Region,i)
}
gra <- list()
for(i in 1:18){
assign("Region",Stream_plot[Region==index[i]][,max(Q),by=DecYear])
#MOV
MOV <- Moving_window(x=Region, win = 10, url = "F:/StreamFlow/Plot/Moving_Windows",
save = FALSE, name = quote(Region1))
x <- Region$V1
fit <- linear(x,point[i,1],point[i,2],point[i,3])
fit2 <- quad(x)
est <- graph_data(fit,fit2)
gra[[i]] <- plot_para(est[[1]],est[[2]],est[[3]],Region,i)
}
plot_final <- list()
for(i in 1:6){
p <- gra[[i]]
plot_final[[3*(i-1)+1]] <- p[[1]]
plot_final[[3*(i-1)+2]] <- p[[2]]
plot_final[[3*(i-1)+3]] <- p[[3]]
}
plot_final[["ncol"]] = 3
plot_final[["nrow"]] = 6
do.call(grid.arrange,plot_final)
plot_final <- list()
for(i in 1:9){
p <- gra[[i]]
plot_final[[3*(i-1)+1]] <- p[[1]]
plot_final[[3*(i-1)+2]] <- p[[2]]
plot_final[[3*(i-1)+3]] <- p[[3]]
}
plot_final[["ncol"]] = 3
plot_final[["nrow"]] = 9
do.call(grid.arrange,plot_final)
do.call(grid.arrange,plot_final)
plot_final <- list()
for(i in 1:6){
p <- gra[[i]]
plot_final[[3*(i-1)+1]] <- p[[1]]
plot_final[[3*(i-1)+2]] <- p[[2]]
plot_final[[3*(i-1)+3]] <- p[[3]]
}
plot_final[["ncol"]] = 3
plot_final[["nrow"]] = 6
do.call(grid.arrange,plot_final)
do.call(grid.arrange,plot_final)
plot_final <- list()
for(i in 7:12){
p <- gra[[i-6]]
plot_final[[3*(i-1)+1]] <- p[[1]]
plot_final[[3*(i-1)+2]] <- p[[2]]
plot_final[[3*(i-1)+3]] <- p[[3]]
}
plot_final[["ncol"]] = 3
plot_final[["nrow"]] = 6
do.call(grid.arrange,plot_final)
do.call(grid.arrange,plot_final)
do.call(grid.arrange,plot_final)
plot_final <- list()
for(i in 7:12){
p <- gra[[i-6]]
plot_final[[3*(i-6)+1]] <- p[[1]]
plot_final[[3*(i-6)+2]] <- p[[2]]
plot_final[[3*(i-6)+3]] <- p[[3]]
}
plot_final[["ncol"]] = 3
plot_final[["nrow"]] = 6
plot_final <- list()
for(i in 7:12){
p <- gra[[i-6]]
plot_final[[3*(i-6)+1]] <- p[[1]]
plot_final[[3*(i-6)+2]] <- p[[2]]
plot_final[[3*(i-6)+3]] <- p[[3]]
}
plot_final <- list()
for(i in 7:12){
p <- gra[[i-6]]
plot_final[[3*(i-7)+1]] <- p[[1]]
plot_final[[3*(i-7)+2]] <- p[[2]]
plot_final[[3*(i-7)+3]] <- p[[3]]
}
plot_final[["ncol"]] = 3
plot_final[["nrow"]] = 6
do.call(grid.arrange,plot_final)
do.call(grid.arrange,plot_final)
plot_final <- list()
for(i in 7:12){
p <- gra[[i]]
plot_final[[3*(i-7)+1]] <- p[[1]]
plot_final[[3*(i-7)+2]] <- p[[2]]
plot_final[[3*(i-7)+3]] <- p[[3]]
}
plot_final[["ncol"]] = 3
plot_final[["nrow"]] = 6
do.call(grid.arrange,plot_final)
plot_final <- list()
for(i in 13:18){
p <- gra[[i]]
plot_final[[3*(i-13)+1]] <- p[[1]]
plot_final[[3*(i-13)+2]] <- p[[2]]
plot_final[[3*(i-13)+3]] <- p[[3]]
}
plot_final[["ncol"]] = 3
plot_final[["nrow"]] = 6
do.call(grid.arrange,plot_final)
do.call(grid.arrange,plot_final)
i = 17
assign("Region",Stream_plot[Region==index[i]][,max(Q),by=DecYear])
#MOV
MOV <- Moving_window(x=Region, win = 10, url = "F:/StreamFlow/Plot/Moving_Windows",
save = FALSE, name = quote(Region1))
x <- Region$V1
fit <- linear(x,point[i,1],point[i,2],point[i,3])
fit2 <- quad(x)
fit$double_fit$formulation
fit2$vals
fit2$est_sh
fit2$conv
fit2$cov
est <- graph_data(fit,fit2)
est$est_sh
View(linear)
mu=point[i,1]
sig=point[i,2]
sh=point[i,3]
para=c("double", "single", "s")
co <- data.frame(mu = NA, sig = NA, sh = NA)
n <- 1
for (i in 1:3) {
for (j in 1:3) {
for (h in 1:3) {
co[n, 1] <- para[i]
co[n, 2] <- para[j]
co[n, 3] <- para[h]
n <- n + 1
}
}
}
single <- 1:length(x)
double_mu <- cut_breakpoint(1:length(x), mu)
double_sig <- cut_breakpoint(1:length(x), sig)
double_sh <- cut_breakpoint(1:length(x), sh)
rank_single <- which(!apply(co,1,function(x) "double" %in% x))
rank_double <- c(1:27)[-rank_single]
rank_single <- rank_single[-length(rank_single)]
double_sh
fit2$formulation
View(co)
View(quad)
para=c("quad", "single", "s")
co <- data.frame(mu = NA, sig = NA, sh = NA)
n <- 1
for (i in 1:3) {
for (j in 1:3) {
for (h in 1:3) {
co[n, 1] <- para[i]
co[n, 2] <- para[j]
co[n, 3] <- para[h]
n <- n + 1
}
}
}
single <- 1:length(x)
double_mu <- cbind(1:length(x),(1:length(x))^2)
double_sig <- cbind(1:length(x),(1:length(x))^2)
double_sh <- cbind(1:length(x),(1:length(x))^2)
View(co)
single <- 1:length(x)
double_mu <- cbind(1:length(x),(1:length(x))^2)
double_sig <- cbind(1:length(x),(1:length(x))^2)
double_sh <- cbind(1:length(x),(1:length(x))^2)
rank <- which(apply(co,1,function(x) "quad" %in% x))
rank
i =25
com <- co[i, ]
com
ll_mu <- ll(com$mu, para, double_mu)
ll_sig <- ll(com$sig, para, double_sig)
ll_sh <- ll(com$sh, para, double_sh)
ll_sh
y <- cbind(1, ll_mu[[2]], ll_sig[[2]], ll_sh[[2]])
y
if (is_empty(ll_mu[[1]])) {
mul <- NULL
loc_mu <- 1
} else {
mul <- ll_mu[[1]] + 1
loc_mu <- c(1, mul)
}
if (is_empty(ll_sig[[1]])) {
sigl <- NULL
loc_sig <- max(loc_mu) + 1
} else {
if (is_empty(mul)) {
sigl <- 1 + ll_sig[[1]]
loc_sig <- c(max(loc_mu), sigl) + 1
} else {
sigl <- max(mul) + ll_sig[[1]]
loc_sig <- c(max(loc_mu), sigl) + 1
}
}
if (is_empty(ll_sh[[1]])) {
shl <- NULL
loc_sh <- max(loc_sig) + 1
} else {
if (is_empty(sigl)) {
if (is_empty(mul)) {
shl <- 1 + ll_sh[[1]]
loc_sh <- c(max(loc_sig), shl+1) + 1
} else {
shl <- max(mul) + ll_sh[[1]]
loc_sh <- c(max(loc_sig), shl+1) + 1
}
} else {
shl <- max(sigl) + ll_sh[[1]]
loc_sh <- c(max(loc_sig), shl+1) + 1
}
}
loc_sh
fit <- try(gev.fit(x, y, mul = mul, sigl = sigl, shl = shl),silent=TRUE)
if('try-error' %in% class(fit)){
fit <- NULL
name <- paste0("fit", i)
assign(name, fit)
next
}else{
fit <- gev.fit(x, y, mul = mul, sigl = sigl, shl = shl)
fit[["AIC"]] <- 2 * (length(fit$mle) + fit$nllh)
fit[["formulation"]] <- com
fit[["est_mu"]] <- CI(as.matrix(cbind(rep(1, 40), ll_mu[[2]])), fit$mle[loc_mu], fit$cov[loc_mu, loc_mu])
fit[["est_sig"]] <- CI(as.matrix(cbind(rep(1, 40), ll_sig[[2]])), fit$mle[loc_sig], fit$cov[loc_sig, loc_sig])
fit[["est_sh"]] <- CI(as.matrix(cbind(rep(1, 40), ll_sh[[2]])), fit$mle[loc_sh], fit$cov[loc_sh, loc_sh])
}
name <- paste0("fit", i)
assign(name, fit)
fit
2933.4+23500-15667+2772+1425.60
14964*8.1
14964*8.15
2444.43+10435.59+89264.11+20987-18200
2933.4+23500-15667+2772+1425.60-3486.91
11477.09*8.15
2444.43+10435.59+89264.11+20987-18200
104931.1-93538.28
11477.09*8.3
11477.09*8.6
11477.09*8.8
2444.43+10435.59+89264.11+20987-18200
11477.09*8.15
2444.43+10435.59+89264.11+20987-18200
104931.1-93538.28
11477.09*8.15
3000*8.4+4000*8.25
