p2 <- est_sig %>%
dplyr::filter(Group %in% ignore) %>%
ggplot(aes(x = t, y = est)) +
geom_line(aes(color = Group, size = I(1))) +
geom_line(aes(x = t, y = U, color = Group), linetype = 2, size = I(1)) +
geom_line(aes(x = t, y = L, color = Group), linetype = 2, size = I(1)) +
xlab(paste0("Region", n,"  ", "t")) +
ylab(expression(sigma(t)))
p3 <- est_sh %>%
dplyr::filter(Group %in% ignore) %>%
ggplot(aes(x = t, y = est)) +
geom_line(aes(color = Group, size = I(1))) +
geom_line(aes(x = t, y = U, color = Group), linetype = 2, size = I(1)) +
geom_line(aes(x = t, y = L, color = Group), linetype = 2, size = I(1)) +
xlab(paste0("Region", n,"  ", "t")) +
ylab(expression(xi(t)))
p <- list(p1, p2, p3)
#  p <- grid.arrange(p1,p2,p3,nrow=3)
#  ggsave(paste0("Region",n,".png"),p,path="F:/Streamflow/Plot/Fit",width=6,height=6)
return(p)
}
gra <- list()
for (i in 1:18){
gra[[i]] <- plot_para(
est[[i]][[1]], est[[i]][[2]], est[[i]][[3]],
MOV=MOV[[i]],
Region=Region[[i]],
n=i,ignore = c("double_fit","single_fit")
)
}
est[[1]][[1]][which(est[[1]][[1]]$Group %in% ignore),]
plot_para <- function(est_mu, est_sig, est_sh, MOV, Region, n = 1, ignore = "best_fit") {
p1 <- est_mu[which(est_mu$Group %in% ignore),] %>%
ggplot(aes(x = t, y = est)) +
geom_line(aes(color = Group, size = I(1))) +
geom_line(aes(x = t, y = U, color = Group), linetype = 2, size = I(1)) +
geom_line(aes(x = t, y = L, color = Group), linetype = 2, size = I(1)) +
geom_point(data = MOV, aes(x = t, y = location, color = "window", size = I(2))) +
geom_point(data = Region, aes(x = DecYear - 1980, y = V1, size = I(2))) +
xlab(paste0("Region", n,"  ", "t")) +
ylab(expression(mu(t)))+
p2 <- est_sig[which(est_sig$Group %in% ignore),] %>%
ggplot(aes(x = t, y = est)) +
geom_line(aes(color = Group, size = I(1))) +
geom_line(aes(x = t, y = U, color = Group), linetype = 2, size = I(1)) +
geom_line(aes(x = t, y = L, color = Group), linetype = 2, size = I(1)) +
xlab(paste0("Region", n,"  ", "t")) +
ylab(expression(sigma(t)))
p3 <- est_sh[which(est_sh$Group %in% ignore),]%>%
ggplot(aes(x = t, y = est)) +
geom_line(aes(color = Group, size = I(1))) +
geom_line(aes(x = t, y = U, color = Group), linetype = 2, size = I(1)) +
geom_line(aes(x = t, y = L, color = Group), linetype = 2, size = I(1)) +
xlab(paste0("Region", n,"  ", "t")) +
ylab(expression(xi(t)))
p <- list(p1, p2, p3)
#  p <- grid.arrange(p1,p2,p3,nrow=3)
#  ggsave(paste0("Region",n,".png"),p,path="F:/Streamflow/Plot/Fit",width=6,height=6)
return(p)
}
gra <- list()
for (i in 1:18){
gra[[i]] <- plot_para(
est[[i]][[1]], est[[i]][[2]], est[[i]][[3]],
MOV=MOV[[i]],
Region=Region[[i]],
n=i,ignore = c("double_fit","single_fit")
)
}
plot_para <- function(est_mu, est_sig, est_sh, MOV, Region, n = 1, ignore = "best_fit") {
library(tidyverse)
p1 <- est_mu[which(est_mu$Group %in% ignore),] %>%
ggplot(aes(x = t, y = est)) +
geom_line(aes(color = Group, size = I(1))) +
geom_line(aes(x = t, y = U, color = Group), linetype = 2, size = I(1)) +
geom_line(aes(x = t, y = L, color = Group), linetype = 2, size = I(1)) +
geom_point(data = MOV, aes(x = t, y = location, color = "window", size = I(2))) +
geom_point(data = Region, aes(x = DecYear - 1980, y = V1, size = I(2))) +
xlab(paste0("Region", n,"  ", "t")) +
ylab(expression(mu(t)))+
p2 <- est_sig[which(est_sig$Group %in% ignore),] %>%
ggplot(aes(x = t, y = est)) +
geom_line(aes(color = Group, size = I(1))) +
geom_line(aes(x = t, y = U, color = Group), linetype = 2, size = I(1)) +
geom_line(aes(x = t, y = L, color = Group), linetype = 2, size = I(1)) +
xlab(paste0("Region", n,"  ", "t")) +
ylab(expression(sigma(t)))
p3 <- est_sh[which(est_sh$Group %in% ignore),]%>%
ggplot(aes(x = t, y = est)) +
geom_line(aes(color = Group, size = I(1))) +
geom_line(aes(x = t, y = U, color = Group), linetype = 2, size = I(1)) +
geom_line(aes(x = t, y = L, color = Group), linetype = 2, size = I(1)) +
xlab(paste0("Region", n,"  ", "t")) +
ylab(expression(xi(t)))
p <- list(p1, p2, p3)
#  p <- grid.arrange(p1,p2,p3,nrow=3)
#  ggsave(paste0("Region",n,".png"),p,path="F:/Streamflow/Plot/Fit",width=6,height=6)
return(p)
}
gra <- list()
for (i in 1:18){
gra[[i]] <- plot_para(
est[[i]][[1]], est[[i]][[2]], est[[i]][[3]],
MOV=MOV[[i]],
Region=Region[[i]],
n=i,ignore = c("double_fit","single_fit")
)
}
est_mu <- est[[1]][[1]]
est_mu[which(est_mu$Group %in% ignore),] %>%
ggplot(aes(x = t, y = est))
View(est_mu)
est_mu[which(est_mu$Group %in% ignore),] %>%
ggplot(aes(x = t, y = est)) +
geom_line(aes(color = Group, size = I(1)))
est_mu[which(est_mu$Group %in% ignore),] %>%
ggplot(aes(x = t, y = est))
tempdir()
plot_para <- function(est_mu, est_sig, est_sh, MOV, Region, n = 1, ignore = "best_fit") {
library(tidyverse)
est_mu <- est[[1]][[1]]
p1 <- est_mu[which(est_mu$Group %in% ignore),] %>%
ggplot(aes(x = t, y = est)) +
geom_line(aes(color = Group, size = I(1))) +
geom_line(aes(x = t, y = U, color = Group), linetype = 2, size = I(1)) +
geom_line(aes(x = t, y = L, color = Group), linetype = 2, size = I(1)) +
geom_point(data = MOV, aes(x = t, y = location, color = "window", size = I(2))) +
geom_point(data = Region, aes(x = DecYear - 1980, y = V1, size = I(2))) +
xlab(paste0("Region", n,"  ", "t")) +
ylab(expression(mu(t)))
p2 <- est_sig[which(est_sig$Group %in% ignore),] %>%
ggplot(aes(x = t, y = est)) +
geom_line(aes(color = Group, size = I(1))) +
geom_line(aes(x = t, y = U, color = Group), linetype = 2, size = I(1)) +
geom_line(aes(x = t, y = L, color = Group), linetype = 2, size = I(1)) +
xlab(paste0("Region", n,"  ", "t")) +
ylab(expression(sigma(t)))
p3 <- est_sh[which(est_sh$Group %in% ignore),]%>%
ggplot(aes(x = t, y = est)) +
geom_line(aes(color = Group, size = I(1))) +
geom_line(aes(x = t, y = U, color = Group), linetype = 2, size = I(1)) +
geom_line(aes(x = t, y = L, color = Group), linetype = 2, size = I(1)) +
xlab(paste0("Region", n,"  ", "t")) +
ylab(expression(xi(t)))
p <- list(p1, p2, p3)
#  p <- grid.arrange(p1,p2,p3,nrow=3)
#  ggsave(paste0("Region",n,".png"),p,path="F:/Streamflow/Plot/Fit",width=6,height=6)
return(p)
}
gra <- list()
for (i in 1:18){
gra[[i]] <- plot_para(
est[[i]][[1]], est[[i]][[2]], est[[i]][[3]],
MOV=MOV[[i]],
Region=Region[[i]],
n=i,ignore = c("double_fit","single_fit")
)
}
plot_para <- function(est_mu, est_sig, est_sh, MOV, Region, n = 1, ignore = "best_fit") {
p1 <- est_mu[which(est_mu$Group %in% ignore),] %>%
ggplot(aes(x = t, y = est)) +
geom_line(aes(color = Group, size = I(1))) +
geom_line(aes(x = t, y = U, color = Group), linetype = 2, size = I(1)) +
geom_line(aes(x = t, y = L, color = Group), linetype = 2, size = I(1)) +
geom_point(data = MOV, aes(x = t, y = location, color = "window", size = I(2))) +
geom_point(data = Region, aes(x = DecYear - 1980, y = V1, size = I(2))) +
xlab(paste0("Region", n,"  ", "t")) +
ylab(expression(mu(t)))
p2 <- est_sig[which(est_sig$Group %in% ignore),] %>%
ggplot(aes(x = t, y = est)) +
geom_line(aes(color = Group, size = I(1))) +
geom_line(aes(x = t, y = U, color = Group), linetype = 2, size = I(1)) +
geom_line(aes(x = t, y = L, color = Group), linetype = 2, size = I(1)) +
xlab(paste0("Region", n,"  ", "t")) +
ylab(expression(sigma(t)))
p3 <- est_sh[which(est_sh$Group %in% ignore),]%>%
ggplot(aes(x = t, y = est)) +
geom_line(aes(color = Group, size = I(1))) +
geom_line(aes(x = t, y = U, color = Group), linetype = 2, size = I(1)) +
geom_line(aes(x = t, y = L, color = Group), linetype = 2, size = I(1)) +
xlab(paste0("Region", n,"  ", "t")) +
ylab(expression(xi(t)))
p <- list(p1, p2, p3)
#  p <- grid.arrange(p1,p2,p3,nrow=3)
#  ggsave(paste0("Region",n,".png"),p,path="F:/Streamflow/Plot/Fit",width=6,height=6)
return(p)
}
for (i in 1:18){
gra[[i]] <- plot_para(
est[[i]][[1]], est[[i]][[2]], est[[i]][[3]],
MOV=MOV[[i]],
Region=Region_list[[i]],
n=i,ignore = c("double_fit","single_fit")
)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
load("fit.Rdata")
load("fit.Rdata")
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='mengranli',
token='4B18844C50A35C326B3D2B0F00E7B9B4',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='mengranli',
token='4B18844C50A35C326B3D2B0F00E7B9B4',
secret='<SECRET>')
rsconnect::setAccountInfo(name='mengranli', token='4B18844C50A35C326B3D2B0F00E7B9B4', secret='LB5vu+RvLd3DLxXIUGnsSbR80Hm9xxI1SHiABb5K')
library(rsconnect)
rsconnect::deployApp('F:/StreamFlow/Model_Fit/app')
rsconnect::deployApp('F:/StreamFlow/Model_Fit')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
?checkboxGroupInput
library(shiny)
?selectInput
qt(0.975,7)
2.3684*3.28/sqrt(8)
2.75+2.746527
2.75-2.746527
choose.files()
file <- choose.files()
file
shiny::runApp()
setwd("F:/Project/YinuoZhou")
load(".Rdata")
View(server)
View(server)
library(treeclim)
library(dplR)
library(reshape)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(scales)
require(gridExtra)
SitePlot<-function(X){
SFMSite <- SFMallCored[which(SFMallCored$Site_ID==X),]
#Symptomatic
SFMSiteSym <- SFMSite[which(SFMSite$Symptomatic=="S"),]
#Asymptomatic
SFMSiteAsym <- SFMSite[which(SFMSite$Symptomatic=="A"),]
Wide_SFMSiteSym <- cast(SFMSiteSym, year~ID, value="ring.width")
Wide_SFMSiteAsym <- cast(SFMSiteAsym, year~ID, value="ring.width")
if(ncol(Wide_SFMSiteAsym)==2){
chronAsym<-Wide_SFMSiteAsym
colnames(chronAsym)[2]<-"SFMstd"
}
else{
rownames(Wide_SFMSiteAsym) <- Wide_SFMSiteAsym[,1]
Wide_SFMSiteAsym <- Wide_SFMSiteAsym[,-1]
class(Wide_SFMSiteAsym) <- c("rwl", "data.frame")
SFMSiteAsym.rwi<-detrend(Wide_SFMSiteAsym,method = "Spline")
chronAsym<-chron(SFMSiteAsym.rwi, prefix="SFM")
chronAsym$year<-as.numeric(row.names(chronAsym))
chronAsym<-as.data.frame(chronAsym)
}
if(ncol(Wide_SFMSiteSym)==2){
chronSym<-Wide_SFMSiteSym
colnames(chronSym)[2]<-"SFMstd"}
else{
rownames(Wide_SFMSiteSym) <- Wide_SFMSiteSym[,1]
Wide_SFMSiteSym <- Wide_SFMSiteSym[,-1]
class(Wide_SFMSiteSym) <- c("rwl", "data.frame")
SFMSiteSym.rwi<-detrend(Wide_SFMSiteSym,method = "Spline")
chronSym<-chron(SFMSiteSym.rwi, prefix="SFM")
chronSym$year<-as.numeric(row.names(chronSym))
chronSym<-as.data.frame(chronSym)
}
#precipitation data
annualpcpSouth<-annualpcp[which(annualpcp$site==X),]
annualpcpSouth$prec<-annualpcpSouth$prec*0.001
if(min(c(chronSym$year,chronAsym$year)>1960)){
limmin<-min(c(chronSym$year,chronAsym$year))}
else{limmin==1960}
limmax<-max(c(chronSym$year,chronAsym$year))
plot1<-ggplot()+
geom_line(data=chronSym,aes(x=year,y=SFMstd,colour="Symptomatic"))+
geom_line(data=chronAsym,aes(x=year,y=SFMstd,colour="Asymptomatic"))+
scale_colour_manual("",
breaks = c("Symptomatic","Asymptomatic"),
values = c("red","forestgreen"))+
ylab("RWI (mm)")+
xlim(limmin,limmax)+
scale_y_continuous(labels = scales::number_format(accuracy = 0.01))+
theme_bw()+
theme(legend.position = c(0,1),
legend.justification = c(0,1),
legend.box.margin = margin(c(10,10,10,10)))
plot2<-ggplot()+
geom_line(data = annualpcpSouth,aes(x=year,y=prec))+
xlim(limmin,limmax)+
theme_bw()+
ylab("Precipitation (e+03 mm^2)")
plot<-grid.arrange(plot1,plot2,nrow=2)
return(plot)
}
library(shiny)
ui<-fluidPage(
#App title
titlePanel("Site Chronology&Precpitation Plot"),
sidebarLayout(
sidebarPanel(
#Input:selector for choosing sites
selectInput("Site",
label = "Choose a site:",
choices = c("S1","S2","S3","S4","S5","S6","C1","C2","C3","C4","C5","C6","N1","N2","N3","N4","N5","N6"))),
#Main panel for displaying outputs
mainPanel(plotOutput("plot"))
)
)
server<-function(input,output){
Site<-reactive({input$Site})
output$plot<-renderPlot({SitePlot(Site())})
}
shinyApp(ui,server)
SitePlotBAI<-function(X){
SFMSiteRWI <- SFMallCored[grepl(X, SFMallCored$Site_ID), , drop = FALSE]
#Symptomatic
SFMSiteRWISym <- SFMSiteRWI[grepl("S", SFMSiteRWI$Symptomatic), , drop = FALSE]
#Asymptomatic
SFMSiteRWIAsym <- SFMSiteRWI[grepl("A", SFMSiteRWI$Symptomatic), , drop = FALSE]
Wide_SFMSiteRWISym <- cast(SFMSiteRWISym, year~ID, value="ring.width")
Wide_SFMSiteRWIAsym <- cast(SFMSiteRWIAsym, year~ID, value="ring.width")
row.names(Wide_SFMSiteRWISym)<-Wide_SFMSiteRWISym$year
row.names(Wide_SFMSiteRWIAsym)<-Wide_SFMSiteRWIAsym$year
Wide_SFMSiteRWISym<-Wide_SFMSiteRWISym[,-1]
Wide_SFMSiteRWIAsym<-Wide_SFMSiteRWIAsym[,-1]
Site_Diam <- SFMSiteRWI[,c(2,8,10)]
Site_Diam<-unique(Site_Diam)
Site_Diam$DBH_mm <- 10*Site_Diam$DBH_cm
Site_Diam$DIB_mm <- Site_Diam$DBH_mm*0.9349
Site_Diam<- Site_Diam[,c(1,2,5)]
rownames(Site_Diam) = Site_Diam$ID
Site_DiamSym<-Site_Diam[grepl("S",Site_Diam$Symptomatic),,drop=FALSE][,c(1,3)]
Site_DiamAsym<-Site_Diam[grepl("A",Site_Diam$Symptomatic),,drop=FALSE][,c(1,3)]
Site_DiamSym <- Site_DiamSym[names(Wide_SFMSiteRWISym),]
Site_DiamAsym <- Site_DiamAsym[names(Wide_SFMSiteRWIAsym),]
rownames(Site_DiamSym) = NULL
rownames(Site_DiamAsym) = NULL
class(Wide_SFMSiteSym) <- c("rwl", "data.frame")
class(Wide_SFMSiteAsym) <- c("rwl", "data.frame")
SFMSiteBAISym <- bai.out(rwl=Wide_SFMSiteRWISym, diam=Site_DiamSym)
SFMSiteBAIAsym <- bai.out(rwl = Wide_SFMSiteRWIAsym,diam = Site_DiamAsym)
if(ncol(SFMSiteBAIAsym)==1){
chronAsym<-SFMSiteBAIAsym
colnames(chronAsym)[1]<-"SFMstd"
}
else{
chronAsym<-chron(SFMSiteBAIAsym, prefix="SFM")
chronAsym$year<-as.numeric(row.names(chronAsym))
chronAsym<-as.data.frame(chronAsym)
}
if(ncol(SFMSiteBAISym)==1){
chronSym<-SFMSiteBAISym
colnames(chronSym)[1]<-"SFMstd"}
else{
chronSym<-chron(SFMSiteBAISym, prefix="SFM")
chronSym$year<-as.numeric(row.names(chronSym))
chronSym<-as.data.frame(chronSym)
}
#precipitation data
annualpcpSite<-annualpcp[grepl(X,annualpcp$site),, drop = FALSE]
annualpcpSite$prec<-annualpcpSite$prec*0.001
if(min(c(chronSym$year,chronAsym$year)>1960)){
limmin<-min(c(chronSym$year,chronAsym$year))}
else{limmin<-1960}
limmax<-max(c(chronSym$year,chronAsym$year))
plot1<-ggplot()+
geom_line(data=chronSym,aes(x=year,y=SFMstd,colour="Symptomatic"))+
geom_line(data=chronAsym,aes(x=year,y=SFMstd,colour="Asymptomatic"))+
scale_colour_manual("",
breaks = c("Symptomatic","Asymptomatic"),
values = c("red","forestgreen"))+
ylab("RWI (mm)")+
xlim(limmin,limmax)+
scale_y_continuous(labels = scales::number_format(accuracy = 0.01))+
theme_bw()+
theme(legend.position = c(0,1),
legend.justification = c(0,1),
legend.box.margin = margin(c(10,10,10,10)))
plot2<-ggplot()+
geom_line(data = annualpcpSite,aes(x=year,y=prec))+
xlim(limmin,limmax)+
theme_bw()+
ylab("Precipitation (e+03 mm^2)")
plot<-grid.arrange(plot1,plot2,nrow=2)
return(plot)
}
SitePlotBAI<-function(X){
SFMSiteRWI <- SFMallCored[grepl(X, SFMallCored$Site_ID), , drop = FALSE]
#Symptomatic
SFMSiteRWISym <- SFMSiteRWI[grepl("S", SFMSiteRWI$Symptomatic), , drop = FALSE]
#Asymptomatic
SFMSiteRWIAsym <- SFMSiteRWI[grepl("A", SFMSiteRWI$Symptomatic), , drop = FALSE]
Wide_SFMSiteRWISym <- cast(SFMSiteRWISym, year~ID, value="ring.width")
Wide_SFMSiteRWIAsym <- cast(SFMSiteRWIAsym, year~ID, value="ring.width")
row.names(Wide_SFMSiteRWISym)<-Wide_SFMSiteRWISym$year
row.names(Wide_SFMSiteRWIAsym)<-Wide_SFMSiteRWIAsym$year
Wide_SFMSiteRWISym<-Wide_SFMSiteRWISym[,-1]
Wide_SFMSiteRWIAsym<-Wide_SFMSiteRWIAsym[,-1]
Site_Diam <- SFMSiteRWI[,c(2,8,10)]
Site_Diam<-unique(Site_Diam)
Site_Diam$DBH_mm <- 10*Site_Diam$DBH_cm
Site_Diam$DIB_mm <- Site_Diam$DBH_mm*0.9349
Site_Diam<- Site_Diam[,c(1,2,5)]
rownames(Site_Diam) = Site_Diam$ID
Site_DiamSym<-Site_Diam[grepl("S",Site_Diam$Symptomatic),,drop=FALSE][,c(1,3)]
Site_DiamAsym<-Site_Diam[grepl("A",Site_Diam$Symptomatic),,drop=FALSE][,c(1,3)]
Site_DiamSym <- Site_DiamSym[names(Wide_SFMSiteRWISym),]
Site_DiamAsym <- Site_DiamAsym[names(Wide_SFMSiteRWIAsym),]
rownames(Site_DiamSym) = NULL
rownames(Site_DiamAsym) = NULL
class(Wide_SFMSiteSym) <- c("rwl", "data.frame")
class(Wide_SFMSiteAsym) <- c("rwl", "data.frame")
SFMSiteBAISym <- bai.out(rwl=Wide_SFMSiteRWISym, diam=Site_DiamSym)
SFMSiteBAIAsym <- bai.out(rwl = Wide_SFMSiteRWIAsym,diam = Site_DiamAsym)
if(ncol(SFMSiteBAIAsym)==1){
chronAsym<-SFMSiteBAIAsym
colnames(chronAsym)[1]<-"SFMstd"
}
else{
chronAsym<-chron(SFMSiteBAIAsym, prefix="SFM")
chronAsym$year<-as.numeric(row.names(chronAsym))
chronAsym<-as.data.frame(chronAsym)
}
if(ncol(SFMSiteBAISym)==1){
chronSym<-SFMSiteBAISym
colnames(chronSym)[1]<-"SFMstd"}
else{
chronSym<-chron(SFMSiteBAISym, prefix="SFM")
chronSym$year<-as.numeric(row.names(chronSym))
chronSym<-as.data.frame(chronSym)
}
#precipitation data
annualpcpSite<-annualpcp[grepl(X,annualpcp$site),, drop = FALSE]
annualpcpSite$prec<-annualpcpSite$prec*0.001
if(min(c(chronSym$year,chronAsym$year)>1960)){
limmin<-min(c(chronSym$year,chronAsym$year))}
else{limmin<-1960}
limmax<-max(c(chronSym$year,chronAsym$year))
plot1<-ggplot()+
geom_line(data=chronSym,aes(x=year,y=SFMstd,colour="Symptomatic"))+
geom_line(data=chronAsym,aes(x=year,y=SFMstd,colour="Asymptomatic"))+
scale_colour_manual("",
breaks = c("Symptomatic","Asymptomatic"),
values = c("red","forestgreen"))+
ylab("RWI (mm)")+
xlim(limmin,limmax)+
scale_y_continuous(labels = scales::number_format(accuracy = 0.01))+
theme_bw()+
theme(legend.position = c(0,1),
legend.justification = c(0,1),
legend.box.margin = margin(c(10,10,10,10)))
plot2<-ggplot()+
geom_line(data = annualpcpSite,aes(x=year,y=prec))+
xlim(limmin,limmax)+
theme_bw()+
ylab("Precipitation (e+03 mm^2)")
plot<-grid.arrange(plot1,plot2,nrow=2)
return(plot)
}
shinyApp(ui,server)
shiny::runApp()
example
example()
exmaple(shiny)
shiny::runApp()
?fluidRow
?fluidRow
runApp()
?wellPanel
runApp()
load("fit.Rdata")
load("fit.Rdata")
setwd("F:/Project/YinuoZhou")
load(".Rdata")
runApp('F:/StreamFlow/Model_Fit')
paste0("data",1:5)
paste0("data",1:5,".csv")
file <- paste0("data",1:5,".csv")
20*0.0645
210-20*0.0645
2.7+0.7878*1
2.7+0.7878*0.5
15+7
