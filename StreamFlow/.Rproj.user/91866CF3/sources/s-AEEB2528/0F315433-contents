---
title: "Reply to questions in the last note"
author: "Mengran Li"
date: "2021/3/2"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


### Do we have data for almost every day?

There are $365\times40+10=14610$ days, and therefore there should be $14610\times671=9803310$ in the case of no $NA$. Actually, we have $9559629$ observations. I have checked and confirmed that these was no $NA$. The proportion is $9559629/9803310=97.51\%$, which is acceptable in my view.

```{r, message=FALSE, echo=FALSE}
library(data.table)
library(tidyverse)
library(KernSmooth)
library(leaflet)
library(maps)
library(gganimate)
```

```{r, echo=FALSE}
setwd("F:\\StreamFlow")
load("Stream.Rdata")
Stream <- Stream[Q >= 0]

Stream_plot <- Stream[, c("Site", "Q", "DecYear", "Month", "Region")]
setkey(Stream_plot, Region)
```

### Are there fewer locations or rivers/ stream in the platau area? & Common geographical features?

I have written a web map [https://gla-my.sharepoint.com/:u:/g/personal/2592713l_student_gla_ac_uk/ET9gm5bLFjZAn2_Oxiu1s3UBeFYVbDnzWFMC44nH-l8GWg?e=QWzD1u](https://gla-my.sharepoint.com/:u:/g/personal/2592713l_student_gla_ac_uk/ET9gm5bLFjZAn2_Oxiu1s3UBeFYVbDnzWFMC44nH-l8GWg?e=QWzD1u).

My conclusion is, rivers in the platau area is really fewer, which may also cause the shortage of observations here. As what I saw in the UCGS with full observations, there is same distribution in this area. 

I think another reasonable interpretation that we see fewer dots in the area in higher quantile maps is, the Q values here are smaller than other area so that when we select threshold, almost none is left (while smaller quantiles opposite).

My question is, whether we need to add some observations here. If we do, however, how can we choose sites added and how to explain the reason.

Given by the geographical features, I have some thoughts. 

-  Bivariate extreme model

-  Another possible division about region (Streamflow feature, Climate, etc.), I mean, more close to graph we draw.

-  Maybe establish a function of distance (not sure)

### Season

My former thought is to divide the months into two season based on graph, one of which is stable and another fluctuates periodically, so that we can explore their period effect or whether they have some relationship further. But now I gave up the idea. US has almost all types of climate, thus there are complex precipitation situation in different regions. 

However, I notice that their changing in precipitation usually can be  described by unit of season because of monsoon and atmospheric pressure. Precipitation would bring important influence on streamflow. Therefore, I think we may can explore the trend of seasons.

I divide the months into seasons by The official travel site of the USA [https://www.visittheusa.co.uk/info/weather-seasons](https://www.visittheusa.co.uk/info/weather-seasons)

-  Summer: June - August

-  Fall: September - November

-  Winter: December - February

-  Spring: March - May

```{r, echo=FALSE}
Stream_plot[Stream_plot[, Month%in%3:5], Season := "Spring"]
Stream_plot[Stream_plot[, Month%in%6:8], Season := "Summer"]
Stream_plot[Stream_plot[, Month%in%9:11], Season := "Autumn"]
Stream_plot[Stream_plot[, Month%in%c(1,2,12)], Season := "Winter"]
```

```{r, echo=FALSE}
Stream_Series <- Stream_plot[, mean(Q, na.rm = TRUE),
                             by = .(DecYear, Season)
]
Stream_Series %>%
  ggplot(aes(x=DecYear,y=V1,group=Season,colour=Season))+
  geom_line()+
  coord_fixed(ratio = 1)
```
The plot is not smoothed. I think it is better than 12-months plot. 
They are not so messy than former plot. I try to find their trend.

```{r, echo = FALSE}
acf_Data <- spread(Stream_Series, key="Season", value="V1")
acf_Data <- ts(acf_Data[,-1])
acf(acf_Data[,1], main = "Spring", xlab="")
acf(acf_Data[,2], main = "Summer", xlab="")
acf(acf_Data[,3], main = "Autumn", ylab="")
acf(acf_Data[,4], main = "Winter", xlab="")
```
Summer is stable. Take the difference to Spring, Autumn and Winter.

```{r, echo = FALSE}
acf(diff(acf_Data[,1]), main = "Spring")
acf(diff(acf_Data[,3]), main = "Autumn")
acf(diff(acf_Data[,4]), main = "Winter")
```

Spring and Autumn are still 1 lag autocorrelation.

Winter is stable.


```{r, echo=FALSE}
Seasonname <- c("Spring","Summer","Autumn","Winter")
Stream_Series <- Stream_plot[, mean(Q, na.rm = TRUE),
                             by = .(DecYear, Season, Region)
]
H <- as.matrix(Stream_Series[, dpill(DecYear, V1), by = .(Season,Region)])

Regionname <- levels(as.factor(Stream_Series$Region))
Stream_Series_fit <- list()
for (i in 1:18) {
  H_1 <- subset(as.data.frame(H),Season == "Spring")
  data <- Stream_Series[Region == Regionname[i] & Season == "Spring"]
  Year <- as.numeric(as.vector(data$DecYear))
  Q <- data$V1
  Stream_Series_fit[[i]] <- locpoly(Year, Q, bandwidth = as.numeric(H_1[i, 3]))
  Stream_Series_fit[[i]]$Region <- Regionname[i]
}
Stream_Series_fit1 <- rbindlist(Stream_Series_fit)
Stream_Series_fit1$Season <- "Spring"

Stream_Series_fit <- list()
for (i in 1:18) {
  H_1 <- subset(as.data.frame(H),Season == "Summer")
  data <- Stream_Series[Region == Regionname[i] & Season == "Summer"]
  Year <- as.numeric(as.vector(data$DecYear))
  Q <- data$V1
  Stream_Series_fit[[i]] <- locpoly(Year, Q, bandwidth = as.numeric(H_1[i, 3]))
  Stream_Series_fit[[i]]$Region <- Regionname[i]
}
Stream_Series_fit2 <- rbindlist(Stream_Series_fit)
Stream_Series_fit2$Season <- "Summer"

Stream_Series_fit <- list()
for (i in 1:18) {
  H_1 <- subset(as.data.frame(H),Season == "Autumn")
  data <- Stream_Series[Region == Regionname[i] & Season == "Autumn"]
  Year <- as.numeric(as.vector(data$DecYear))
  Q <- data$V1
  Stream_Series_fit[[i]] <- locpoly(Year, Q, bandwidth = as.numeric(H_1[i, 3]))
  Stream_Series_fit[[i]]$Region <- Regionname[i]
}
Stream_Series_fit3 <- rbindlist(Stream_Series_fit)
Stream_Series_fit3$Season <- "Autumn"

Stream_Series_fit <- list()
for (i in 1:18) {
  H_1 <- subset(as.data.frame(H),Season == "Winter")
  data <- Stream_Series[Region == Regionname[i] & Season == "Winter"]
  Year <- as.numeric(as.vector(data$DecYear))
  Q <- data$V1
  Stream_Series_fit[[i]] <- locpoly(Year, Q, bandwidth = as.numeric(H_1[i, 3]))
  Stream_Series_fit[[i]]$Region <- Regionname[i]
}
Stream_Series_fit4 <- rbindlist(Stream_Series_fit)
Stream_Series_fit4$Season <- "Winter"

Season_plot <- rbind(Stream_Series_fit1,Stream_Series_fit2)
Season_plot <- rbind(Season_plot,Stream_Series_fit3)
Season_plot <- rbind(Season_plot,Stream_Series_fit4)

Season_plot %>%
  ggplot(aes(x = x, y = y, group = Season, colour = Season))+
  geom_line()+
  coord_fixed(ratio = 0.5)+
  facet_wrap(~Region)
```

###  Show quantiles by location on maps.


```{r, echo = FALSE}
Stream_summary <-  Stream[, .(
  mean(Q, na.rm = TRUE), 
  sd(Q, na.rm = TRUE),
  quantile(Q, 0.05, na.rm = TRUE),
  quantile(Q, 0.1, na.rm = TRUE),
  quantile(Q, 0.2, na.rm = TRUE),
  quantile(Q, 0.5, na.rm = TRUE),
  quantile(Q, 0.7, na.rm = TRUE),
  quantile(Q, 0.9, na.rm = TRUE),
  quantile(Q, 0.95, na.rm = TRUE)), by = Site]
names(Stream_summary) <- c("Site","Mean", "Sd",
                       paste0("q", c(0.05, 0.1, 0.2, 0.5, 0.7, 0.9, 0.95)))
Stream_summary <- gather(Stream_summary,"Mean", "Sd",
                       paste0("q", c(0.05, 0.1, 0.2, 0.5, 0.7, 0.9, 0.95)), key = 'statistics', value = 'Q')
```


```{r, echo = FALSE}
map_site <- Siteinfo[, c("site_no", "dec_lat_va", "dec_lon_va")]
names(map_site) <- c("Site", "lat", "long")

Stream_summary <- full_join(Stream_summary, map_site, by = c("Site" = "Site"))

```

```{r, echo = FALSE}
Stream_summary <- as.data.table(Stream_summary)
summary_stat <- Stream_summary[, summary(Q),by=statistics]
```

I calculated statistics of each region. And the table here is a summary of each statistics. The max value is the reason that the colours seem very close in the map.

```{r, echo = FALSE}
summary_stat[,stat:=rep(c("min","Q1","Q2","Mean","Q3","max"),9)] %>% spread(key="statistics",value="V1")
```


```{r, echo = FALSE}
Stream_summary %>%
  ggplot(aes(long, lat)) +
  geom_point(aes(color = Q, size = I(0.5), alpha = I(0.3))) +
  scale_colour_gradientn(colours = c("blue", "green", "yellow", "orange", "red")) +
  borders("state", size = I(0.2))+
  coord_fixed(ratio=1.5)+
  facet_wrap(~statistics)
```

All plots are available in the github [https://github.com/MengranLi-git/StreamFlow/tree/main/Plot](https://github.com/MengranLi-git/StreamFlow/tree/main/Plot). They are sorted well so that easy to find. And they look better than Rmarkdown. Plots are displayed differently from the window in R. 



