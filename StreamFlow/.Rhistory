Region1 <- Stream_plot[Region=="01"][,max(Q),by=DecYear]
MOV <- Moving_window(x=Region1, win = 15, url = "F:/StreamFlow/Plot/Moving_Windows",
save = TRUE, name = quote(Region1))
for (i in 1:18){
Region <- Stream_plot[Region==Region_name[i,"Hub"]][,max(Q),by=DecYear]
Moving_window(x=Region, win = 10, url = "F:/StreamFlow/Plot/Moving_Windows",
save = TRUE, name = Region_name[i,"Hub"])
}
Double_linear <- function(x, point_mu=0, point_sigma=0, S_mu = FALSE, S_sigma = FALSE){
n_row = nrow(x)
Double <- data.table(t=1:n_row)
Double$V1 <- x$V1
Double$D1 <- 0
Double[(point_mu+1):n_row,"D1"] <- 1
Double$mu_1 <- (Double$t-point_mu)*(1-Double$D1)
Double$mu_2 <- (Double$t-point_mu)*Double$D1
Double$D2 <- 0
Double[(point_sigma+1):n_row,"D2"] <- 1
Double$sigma_1 <- (Double$t-point_sigma)*(1-Double$D2)
Double$sigma_2 <- (Double$t-point_sigma)*Double$D2
if(S_mu){
data1 = NULL
mul = NULL}else{
if(point_mu == 0){
data1 = Double[,"mu_2"]
mul = c(1)
}else{
data1=Double[,c("mu_1","mu_2")]
mul = c(1,2)
}
}
if(S_sigma){
data2[,"sigma_1"] = NULL
sigl = NULL}else{
if(point_sigma==0){
data2=Double[,"sigma_2"]
sigl <- c(length(mul)+1)
}else{
data2=Double[,c("sigma_1","sigma_2")]
sigl <- c((length(mul)+1):(length(mul)+2))
}
}
fit <- gev.fit(xdat = x$V1,
ydat = as.matrix(cbind(data1, data2)), mul=mul, sigl=sigl)
return(fit)
}
## station
fit1 <- Double_linear(Region1, S_mu = TRUE, S_sigma = TRUE)
Double_linear <- function(x, point_mu=0, point_sigma=0, S_mu = FALSE, S_sigma = FALSE){
n_row = nrow(x)
Double <- data.table(t=1:n_row)
Double$V1 <- x$V1
Double$D1 <- 0
Double[(point_mu+1):n_row,"D1"] <- 1
Double$mu_1 <- (Double$t-point_mu)*(1-Double$D1)
Double$mu_2 <- (Double$t-point_mu)*Double$D1
Double$D2 <- 0
Double[(point_sigma+1):n_row,"D2"] <- 1
Double$sigma_1 <- (Double$t-point_sigma)*(1-Double$D2)
Double$sigma_2 <- (Double$t-point_sigma)*Double$D2
if(S_mu){
data1 = NULL
mul = NULL}else{
if(point_mu == 0){
data1 = Double[,"mu_2"]
mul = c(1)
}else{
data1=Double[,c("mu_1","mu_2")]
mul = c(1,2)
}
}
if(S_sigma){
data2 = NULL
sigl = NULL}else{
if(point_sigma==0){
data2=Double[,"sigma_2"]
sigl <- c(length(mul)+1)
}else{
data2=Double[,c("sigma_1","sigma_2")]
sigl <- c((length(mul)+1):(length(mul)+2))
}
}
fit <- gev.fit(xdat = x$V1,
ydat = as.matrix(cbind(data1, data2)), mul=mul, sigl=sigl)
return(fit)
}
## station
fit1 <- Double_linear(Region1, S_mu = TRUE, S_sigma = TRUE)
## mu_trend, sigma_station
fit2 <- Double_linear(Region1, point_mu = 0, S_sigma = TRUE)
View(fit1)
## mu_station, sigma_trend
fit3 <- Double_linear(Region1, point_sigma = 0, S_mu = TRUE)
## mu_twice, sigma_station
fit3 <- Double_linear(Region1, point_mu = 16, S_sigma = TRUE)
fit3 <- Double_linear(Region1, point_sigma = 0, S_mu = TRUE)
## mu_twice, sigma_station
fit4 <- Double_linear(Region1, point_mu = 16, S_sigma = TRUE)
## mu_twice, sigma_trend
fit5 <- Double_linear(Region1, point_mu = 16, point_sigma=0)
## mu_station, sigma_twice
fit6 <- Double_linear(Region1, point_sigma=16, S_mu = TRUE)
## mu_trend, sigma_twice
fit7 <- Double_linear(Region1, point_mu = 0, point_sigma=16)
## mu_twice, sigma_twice
fit8 <- Double_linear(Region1, point_mu = 16, point_sigma=16)
fit1$nllh
fit2$nllh
fit3$nllh
fit4$nllh
fit5$nllh
fit6$nllh
fit7$nllh
fit8$nllh
?gev.fit
fit1 <- Double_linear(Region1, S_mu = TRUE, S_sigma = TRUE)
## mu_trend, sigma_station
fit2 <- Double_linear(Region1, point_mu = 0, S_sigma = TRUE)
## mu_station, sigma_trend
fit3 <- Double_linear(Region1, point_sigma = 0, S_mu = TRUE)
## mu_trend, sigma_trend
fit4 <- Double_linear(Region1, point_mu = 0, point_sigma = 0)
## mu_twice, sigma_station
fit5 <- Double_linear(Region1, point_mu = 16, S_sigma = TRUE)
## mu_twice, sigma_trend
fit6 <- Double_linear(Region1, point_mu = 16, point_sigma=0)
## mu_station, sigma_twice
fit7 <- Double_linear(Region1, point_sigma=16, S_mu = TRUE)
## mu_trend, sigma_twice
fit8 <- Double_linear(Region1, point_mu = 0, point_sigma=16)
## mu_twice, sigma_twice
fit9 <- Double_linear(Region1, point_mu = 16, point_sigma=16)
3+fit1$nllh
4+fit2$nllh
4+fit3$nllh
5+fit4$nllh
6+fit5$nllh
7+fit6$nllh
6+fit7$nllh
7+fit8$nllh
9+fit9$nllh
fit2
## Moving_window
x <- Region1
gev.fit(x$V1)
fit <- gev.fit(x$V1)
shape <- fit$mle[3]
?gev.fit
for (i in 1:(n_row-2*n_sep)){
fit <- gev.fit(x$V1[i:(i+win)],shape=shape)
parameter[i+n_sep,1] <- i+n_sep
parameter[i+n_sep,2:4] <- fit$mle
}
n_row = nrow(x)
n_sep = round(win/2)
fit <- gev.fit(x$V1)
shape <- fit$mle[3]
parameter <- as.data.frame(matrix(NA, ncol=4, nrow=n_row))
names(parameter) <- c("t","location","scale","shape")
for (i in 1:(n_row-2*n_sep)){
fit <- gev.fit(x$V1[i:(i+win)],shape=shape)
parameter[i+n_sep,1] <- i+n_sep
parameter[i+n_sep,2:4] <- fit$mle
}
win=15
n_row = nrow(x)
n_sep = round(win/2)
fit <- gev.fit(x$V1)
shape <- fit$mle[3]
parameter <- as.data.frame(matrix(NA, ncol=4, nrow=n_row))
names(parameter) <- c("t","location","scale","shape")
for (i in 1:(n_row-2*n_sep)){
fit <- gev.fit(x$V1[i:(i+win)],shape=shape)
parameter[i+n_sep,1] <- i+n_sep
parameter[i+n_sep,2:4] <- fit$mle
}
for (i in 1:(n_row-2*n_sep)){
fit <- gev.fit(x$V1[i:(i+win)],shl=shape)
parameter[i+n_sep,1] <- i+n_sep
parameter[i+n_sep,2:4] <- fit$mle
}
n_row = nrow(x)
n_sep = round(win/2)
fit <- gev.fit(x$V1)
shape <- fit$mle[3]
parameter <- as.data.frame(matrix(NA, ncol=4, nrow=n_row))
names(parameter) <- c("t","location","scale","shape")
for (i in 1:(n_row-2*n_sep)){
fit <- gev.fit(x$V1[i:(i+win)],shinit=shape)
parameter[i+n_sep,1] <- i+n_sep
parameter[i+n_sep,2:4] <- fit$mle
}
## station
fit1 <- Double_linear(Region1, S_mu = TRUE, S_sigma = TRUE)
## mu_trend, sigma_station
fit2 <- Double_linear(Region1, point_mu = 0, S_sigma = TRUE)
## mu_station, sigma_trend
fit3 <- Double_linear(Region1, point_sigma = 0, S_mu = TRUE)
## mu_trend, sigma_trend
fit4 <- Double_linear(Region1, point_mu = 0, point_sigma = 0)
## mu_twice, sigma_station
fit5 <- Double_linear(Region1, point_mu = 16, S_sigma = TRUE)
## mu_twice, sigma_trend
fit6 <- Double_linear(Region1, point_mu = 16, point_sigma=0)
## mu_station, sigma_twice
fit7 <- Double_linear(Region1, point_sigma=16, S_mu = TRUE)
## mu_trend, sigma_twice
fit8 <- Double_linear(Region1, point_mu = 0, point_sigma=16)
## mu_twice, sigma_twice
fit9 <- Double_linear(Region1, point_mu = 16, point_sigma=16)
gev.fit()
gev.fit
get(paste0("fit",1:9,"$nllh"))
get(paste0("fit",1:9,"$nllh"))
get(paste0("fit",1:9))
paste0("fit",1:9,"$nllh")
get(paste0("fit",1:9))$nllh
paste0("fit",1:9)
for(i in 1:9){
get(paste0("fit",i))$nllh
}
for(i in 1:9){
print(get(paste0("fit",i))$nllh)
}
result <- data.table(df=c(3,4,4,5,6,7,6,7,9))
View(result)
for(i in 1:9){
result[i, "-lik"] <- get(paste0("fit",i))$nllh
}
View(result)
result <- data.table(df=c(3,4,4,5,6,7,6,7,9))
for(i in 1:9){
result[i, "nlik"] <- get(paste0("fit",i))$nllh
}
result <- transform(result, AIC=df+nlik)
result <- transform(result, AIC=2*(df+nlik))
View(result)
which.min(result$AIC)
get(paste0("fit",which.min(result$AIC)))
get(paste0("fit",which.min(result$AIC)))$mle
get(paste0("fit",which.min(result$AIC)))$se
View(Region1)
ggplot(Region1,aes(x=DecYear-1979,y=V1))
mle <- get(paste0("fit",which.min(result$AIC)))$mle
se <- get(paste0("fit",which.min(result$AIC)))$se
t <- 1:40
y <- mle[1]+t*mle[2]
y <- data.frame(t = 1:40, y = mle[1]+t*mle[2])
View(y)
y <- data.frame(t = 1:40, mu_t = mle[1]+t*mle[2])
ggplot(y,aes(x=t,y=mu_t))+
geom_line()
View(MOV)
ggplot(y,aes(x=t,y=mu_t))+
geom_line()+
geom_point(data = MOV, aes(x=t), y=location, color=I("blue")))+
geom_point(data = Region1, aes(x=DecYear-1980, y=V1,color="red"))+
xlab("t")+
ylab("location")
ggplot(y,aes(x=t,y=mu_t))+
geom_line()
ggplot(y,aes(x=t,y=mu_t))+
geom_line()+
geom_point(data = MOV, aes(x=t, y=location, color=I("blue")))+
geom_point(data = Region1, aes(x=DecYear-1980, y=V1,color="red"))+
xlab("t")+
ylab("location")
se
y <- data.frame(t = 1:40, mu_t = mle[1]+t*mle[2],
upper = mle[1]+qnorm(0.975)*se[1]+t*(mle[2]+qnorm(0.975)*se[2]),
lower = mle[1]-qnorm(0.975)*se[1]+t*(mle[2]-qnorm(0.975)*se[2]))
View(y)
ggplot(y,aes(x=t,y=mu_t))+
geom_line()+
geom_line(aes(x=t,y=upper))+
geom_point(data = MOV, aes(x=t, y=location, color=I("blue")))+
geom_point(data = Region1, aes(x=DecYear-1980, y=V1,color="red"))+
xlab("t")+
ylab("location")
ggplot(y,aes(x=t,y=mu_t))+
geom_line()+
geom_line(aes(x=t,y=upper))+
geom_line(aes(x=t,y=lower))+
geom_point(data = MOV, aes(x=t, y=location, color=I("blue")))+
geom_point(data = Region1, aes(x=DecYear-1980, y=V1,color="red"))+
xlab("t")+
ylab("location")
?geom_line
ggplot(y,aes(x=t,y=mu_t))+
geom_line()+
geom_line(aes(x=t,y=upper),linetype=2)+
geom_line(aes(x=t,y=lower),linetype=2)+
geom_point(data = MOV, aes(x=t, y=location, color=I("blue")))+
geom_point(data = Region1, aes(x=DecYear-1980, y=V1,color="red"))+
xlab("t")+
ylab("location")
plot(fit2)
gev.diag(fit2)
set.panel(2,2)
gev.diag(fit2)
library(fields)
library(fields)
set.panel(2,2)
gev.diag(fit2)
?gum.fit
View(fit9)
library(data.table)
library(tidyverse)
library(ismev)
setwd("F:\\StreamFlow")
load("Stream.Rdata")
Stream <- Stream[Q >= 0]
Stream_plot <- Stream[, c("Site", "Q", "DecYear", "Month", "Region")]
## Block
Region1 <- Stream_plot[Region=="01"][,max(Q),by=DecYear]
## Moving_window
x <- Region1
Moving_window <- function(x, win=15, url, save=TRUE, name){
n_row = nrow(x)
n_sep = round(win/2)
fit <- gev.fit(x$V1)
shape <- fit$mle[3]
parameter <- as.data.frame(matrix(NA, ncol=4, nrow=n_row))
names(parameter) <- c("t","location","scale","shape")
for (i in 1:(n_row-2*n_sep)){
fit <- gev.fit(x$V1[i:(i+win)],shinit=shape)
parameter[i+n_sep,1] <- i+n_sep
parameter[i+n_sep,2:4] <- fit$mle
}
if(save == TRUE){
ggplot(parameter, aes(x=t, y=location))+
geom_point()+
xlab("t")+
ylab("location")
ggsave(paste0(url,"/","location",name,".png"), plot=last_plot())
ggplot(parameter, aes(x=t, y=scale))+
geom_point()+
xlab("t")+
ylab("scale")
ggsave(paste0(url,"/","scale",name,".png"), plot=last_plot())
}
return(parameter)
}
## An exmaple
MOV <- Moving_window(x=Region1, win = 15, url = "F:/StreamFlow/Plot/Moving_Windows",
save = TRUE, name = quote(Region1))
## All Region
for (i in 1:18){
Region <- Stream_plot[Region==Region_name[i,"Hub"]][,max(Q),by=DecYear]
Moving_window(x=Region, win = 10, url = "F:/StreamFlow/Plot/Moving_Windows",
save = TRUE, name = Region_name[i,"Hub"])
}
## Double_linear
Double_linear <- function(x, point_mu=0, point_sigma=0, S_mu = FALSE, S_sigma = FALSE){
n_row = nrow(x)
Double <- data.table(t=1:n_row)
Double$V1 <- x$V1
Double$D1 <- 0
Double[(point_mu+1):n_row,"D1"] <- 1
Double$mu_1 <- (Double$t-point_mu)*(1-Double$D1)
Double$mu_2 <- (Double$t-point_mu)*Double$D1
Double$D2 <- 0
Double[(point_sigma+1):n_row,"D2"] <- 1
Double$sigma_1 <- (Double$t-point_sigma)*(1-Double$D2)
Double$sigma_2 <- (Double$t-point_sigma)*Double$D2
if(S_mu){
data1 = NULL
mul = NULL}else{
if(point_mu == 0){
data1 = Double[,"mu_2"]
mul = c(1)
}else{
data1=Double[,c("mu_1","mu_2")]
mul = c(1,2)
}
}
if(S_sigma){
data2 = NULL
sigl = NULL}else{
if(point_sigma==0){
data2=Double[,"sigma_2"]
sigl <- c(length(mul)+1)
}else{
data2=Double[,c("sigma_1","sigma_2")]
sigl <- c((length(mul)+1):(length(mul)+2))
}
}
fit <- gev.fit(xdat = x$V1,
ydat = as.matrix(cbind(data1, data2)), mul=mul, sigl=sigl)
return(fit)
}
## station
fit1 <- Double_linear(Region1, S_mu = TRUE, S_sigma = TRUE)
## mu_trend, sigma_station
fit2 <- Double_linear(Region1, point_mu = 0, S_sigma = TRUE)
## mu_station, sigma_trend
fit3 <- Double_linear(Region1, point_sigma = 0, S_mu = TRUE)
## mu_trend, sigma_trend
fit4 <- Double_linear(Region1, point_mu = 0, point_sigma = 0)
## mu_twice, sigma_station
fit5 <- Double_linear(Region1, point_mu = 16, S_sigma = TRUE)
## mu_twice, sigma_trend
fit6 <- Double_linear(Region1, point_mu = 16, point_sigma=0)
## mu_station, sigma_twice
fit7 <- Double_linear(Region1, point_sigma=16, S_mu = TRUE)
## mu_trend, sigma_twice
fit8 <- Double_linear(Region1, point_mu = 0, point_sigma=16)
## mu_twice, sigma_twice
fit9 <- Double_linear(Region1, point_mu = 16, point_sigma=16)
result <- data.table(df=c(3,4,4,5,6,7,6,7,9))
for(i in 1:9){
result[i, "nlik"] <- get(paste0("fit",i))$nllh
}
result <- transform(result, AIC=2*(df+nlik))
which.min(result$AIC)
mle <- get(paste0("fit",which.min(result$AIC)))$mle
se <- get(paste0("fit",which.min(result$AIC)))$se
t <- 1:40
y <- data.frame(t = 1:40, mu_t = mle[1]+t*mle[2],
upper = mle[1]+qnorm(0.975)*se[1]+t*(mle[2]+qnorm(0.975)*se[2]),
lower = mle[1]-qnorm(0.975)*se[1]+t*(mle[2]-qnorm(0.975)*se[2]))
ggplot(y,aes(x=t,y=mu_t))+
geom_line()+
geom_line(aes(x=t,y=upper),linetype=2)+
geom_line(aes(x=t,y=lower),linetype=2)+
geom_point(data = MOV, aes(x=t, y=location, color=I("blue")))+
geom_point(data = Region1, aes(x=DecYear-1980, y=V1,color="red"))+
xlab("t")+
ylab("location")
fit2
gev.fit
?gev.fit
fit2
ci.fevd(x = fit2, alpha = 0.05, type = "parameter")
?fevd
library(extRemes)
install.packages("extRemes")
library(extRemes)
library(extRemes)
?fevd
n_row = nrow(x)
Double <- data.table(t=1:n_row)
Double$V1 <- x$V1
Double$D1 <- 0
Double[(point_mu+1):n_row,"D1"] <- 1
Double$mu_1 <- (Double$t-point_mu)*(1-Double$D1)
Double$mu_2 <- (Double$t-point_mu)*Double$D1
Double$D2 <- 0
Double[(point_sigma+1):n_row,"D2"] <- 1
Double$sigma_1 <- (Double$t-point_sigma)*(1-Double$D2)
Double$sigma_2 <- (Double$t-point_sigma)*Double$D2
point_mu=0, point_sigma=0
point_mu=0
point_sigma=0
n_row = nrow(x)
Double <- data.table(t=1:n_row)
Double$V1 <- x$V1
Double$D1 <- 0
Double[(point_mu+1):n_row,"D1"] <- 1
Double$mu_1 <- (Double$t-point_mu)*(1-Double$D1)
Double$mu_2 <- (Double$t-point_mu)*Double$D1
Double$D2 <- 0
Double[(point_sigma+1):n_row,"D2"] <- 1
Double$sigma_1 <- (Double$t-point_sigma)*(1-Double$D2)
Double$sigma_2 <- (Double$t-point_sigma)*Double$D2
View(Double)
data(PORTw)
View(PORTw)
View(Double)
fevd(Double$V1, Double, scale.fun=~mu1, use.phi=TRUE, type = "GEV")
fevd(Double$V1, Double, scale.fun=~mu_1, use.phi=TRUE, type = "GEV")
fevd(Double$V1, Double, scale.fun=~sigma_2, use.phi=TRUE, type = "GEV")
# GEV
fitPORTstdmax <- fevd(PORTw$TMX1, PORTw, scale.fun=~STDTMAX, use.phi=TRUE, shape.fun = ~ 0)
# GEV
fitPORTstdmax <- fevd(PORTw$TMX1, PORTw, scale.fun=~STDTMAX, use.phi=TRUE, shape = 0 )
# GEV
fitPORTstdmax <- fevd(PORTw$TMX1, PORTw, scale.fun=~STDTMAX, use.phi=TRUE, shape = 0.6 )
plot(fitPORTstdmax)
fitPORTstdmax
fevd(Double$V1, Double, scale.fun=~sigma_2, use.phi=TRUE, type = "GEV", shape = 0.6)
fitex <- fevd(Double$V1, Double, scale.fun=~sigma_2, use.phi=TRUE, type = "GEV", shape = 0.6)
# One can see how finding the optimum value numerically can be tricky!
ci(fitex)
# One can see how finding the optimum value numerically can be tricky!
ci(fitex,mle)
# One can see how finding the optimum value numerically can be tricky!
ci.fevd.mle(fitex)
# GEV
fitPORTstdmax <- fevd(PORTw$TMX1, PORTw, scale.fun=~STDTMAX, use.phi=TRUE, shape = 0.6 )
fitPORTstdmax
# GEV
fitPORTstdmax <- fevd(PORTw$TMX1, PORTw, scale.fun=~STDTMAX, shape = 0.6 )
# GEV
fitPORTstdmax <- fevd(PORTw$TMX1, PORTw, scale.fun=~STDTMAX, shape.fum = 0.6 )
# GEV
fitPORTstdmax <- fevd(PORTw$TMX1, PORTw, scale.fun=~STDTMAX, shape.fun = 0.6 )
fitPORTstdmax
# GEV
fitPORTstdmax <- fevd(PORTw$TMX1, PORTw, scale.fun=~STDTMAX, shape.fun = I(0.6) )
fitPORTstdmax
shape <- fit$mle[3]
fit <- gev.fit(x$V1)
shape <- fit$mle[3]
fitex <- fevd(Double$V1, Double, scale.fun=~sigma_2, use.phi=TRUE, type = "GEV", initial = list(shape = -0.07))
fitex
fitex <- fevd(Double$V1, Double, scale.fun=~sigma_2, use.phi=TRUE, type = "GEV")
fitex
?optim
fevd
?check.constant
?fevd
